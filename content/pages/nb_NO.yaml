sections:
-   subsections:
    -   title: Hva er Hedy?
        text: "Hedy er et tekstlig programmeringsspråk, spesifikt utviklet for barn og ungdom i alderen 10 til 15 år.\nI motsetning til programmeringsspråk laget for barn, som eks. Scratch, så bruker Hedy tekst istedenfor kode-blokker.\nMed Hedy lærer du å skrive kode slik som ekte programmerere gjør, men i små steg med kjekke og morsomme øvelser.\nPå denne måten kan Hedy fungere som et springbrett til ekte programmeringsspråk som Python på en tilgjenglig og morro måte,\nDu kan se en [video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) om utviklingen av Hedy som et programmeringsspråk her.\n"
    -   title: Målgruppe
        text: "Hedy er utviklet for barne- og ungdomskole elever i alderen 10 til 15 år.\nDet er viktig at elevene er flink til å lese før de begynner med Hedy. Vi anbefaler å vente med å begynne med Hedy til elevene har oppnådd leseferdigheter tilsvarende et minimumsnivå av tredje klasse.\nElever (og lærerere!) trenger ikke tidligere erfaring med programmering for å starte med Hedy.\n"
    -   title: Hvordan fungerer Hedy?
        text: "<Todo>\n"
    -   title: Å undervise med Hedy
        text: "Hedy er delt opp i nivåer hvor man lærer seg nye kommandoer og regler. Hvert nivå inneholder et varierende sett med øvelser før å øve på de nylig lærte kommandoene.\nØvelsene kan gjøres av elevene på egenhånd, eller som del av klassisk undervisning. I bruksanvisningen for lærerer vil det finnes undervisningplan for hvert av nivåene.\nUndervisningsplanene og øvelsene har steg for steg forklaringer for å sikre at lærere med mindre digital erfaring også klarer å bruke Hedy!\nHedy støtter også kreative lærere som foretrekker å lage sine egne undervisningsplaner og øvelser!\n"
    -   title: Enheter
        text: "Hedy er webbasert. Dette betyr at Hedy fungerer på enhver digital enhet som har en nettleser (Google Chrome, Firefox, Edge, osv.). Hedy fungerer på laptoper, chromebooks, nettbrett og til og med smarttelefoner!\nMan trenger ikke å laste ned noe for å bruke Hedy, bare gå til nettsiden og sett i gang!\n"
    title: Introduksjon
    key: intro
-   title: Forberedelser
    key: forberedelser
    subsections:
    -   title: Sett ditt foretrukke språk
        text: "Når elevene lager en profil må de velge et 'foretrukke språk'. Hedy vil alltid lastet på det valgte språket.\nDet foretrukke språket kan alltids endres senere ved å gå til 'Min profil' og velge 'Mine personlige innstillinger'.\nFra desember 2021 er det obligatorisk å sette et foretrukket språk for hver Hedy konto.\nFor kontoer opprettet tidligere enn desember 2021 vil man få en melding om at foretrukket språk mangler.\nDette er ikke noe problem, bare gå til 'Min profil' og velg et språk i 'Mine personlige innstillinger'.\nFrem til du velger et språk vil Hedy vises i språket som er valgt i nettleserinnstillingene. Hvis det språket ikke støttes velges automatisk engelsk.\n"
    -   text: "Nå når du er logget inn vil du se den blå menylinjen med 'Mine programmer' og din profil.\nDisse knappene vil også vises til elevene dine også. I 'Mine programmer' vil du finne all koden som lagres.\n\nDu kan lagre prosjektene dine ved å gi prosjektet et navn i den hvite linjen, for så å lagre ved å trykke på den grønne 'Lagre Kode' knappen\n\nLa programmeringsmorroen begynne!\n"
    -   text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My account' and 'My personal settings' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n\n**For non-English speakers**\nNot only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.\nThis way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.\n"
    -   text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   key: undervise
    title: Å undervise med Hedy
    subsections:
    -   title: Undervise med Hedy
        text: "Hedy inneholder flere nivåer som hver for seg vil lære elevene en ny ferdighet. Vi anbefaler å undervise i et nivå per undervisningstime.\nDette gir elevene dine tid til å virkelig lære seg en ny kommando eller et nytt konsept, samt at de får tid til å øve skikkelig før de går videre til neste nivå.\nVi bruker denne strukturen i våre undervisningstimer:\n"
    -   title: Introduksjon
        text: "Du kan begynne undervisningen med å aktivere elevenes tidligere kunnskap: Hva har de lært sålangt, hva lærte de forrige gang og hvilke feil gjorde de som de nå har lært av?\nPå denne måten vil alle tidligere lærte kommandoer og vanlige feil være lett tilgjengelig i elevenes hukommelse når du begynner å introdusere det nye læringsmålet.\n"
    -   title: Introduksjon av nye konsepter og kommandoer
        text: "Det kan være veldig vanskelig for noen elever å forstå nye konsepter og kommandoer.\nDerfor er det svært viktig å gi gode eksempler på hvordan de nye kommandoene skal brukes.\nSpesielt i de innledende nivåene, når elevene ikke har erfaring med programmering i det hele tatt, kan det være vanskelig for elevene å forstå de nye abstrakte konseptene.\nÅ vise mange eksempler vil hjelpe med å gjøre et abstrakt konsept mer gjennkjennelig og lettere å forstå.\nEksempelvis: 'Hva er en variabel?', 'Se, variabelen kjæledyr endret seg til å være hund'.\n"
    -   title: La oss komme i gang
        text: "Hvert nivå inneholder forskjellige eventyr som du kan finne i de rosa fanene. Den første rosa fanen forklarer de nye kommandoene som introduseres i dette nivået.\nDe neste fanene er eventyr som elevene kan bryne seg på og gjøre til sine egne prosjekter.\nEventyrene er sortert fra lettest til vanskeligst. Vi anbefaler derfor å begynne til venstre, og jobbe deg mot høyre.\nDen siste fanen 'Hva skjer neste gang' gir en liten forsmak på hva du skal lære om i neste nivå. Du kan selvfølgelig velge hvilke eventyr du ønsker at elevene skal gjøre for hvert nivå.\nDe trenger ikke alltid å gjøre alle eventyrene. Hvert eventyr inneholder eksempelkode som studenene kan prøve med den grønne knappen.\nEksempelkoden blir kopiert til kodefeltet slik at elevene kan prøve koden, samt eksperimentere ved å gjøre endringer i koden.\nStimuler elevene dine til å gjøre eksempelkoden til deres egne prosjekter ved å legge til sine idéer og lage sine egne variasjoner av eventyrene.\n"
    -   title: Quiz
        text: "For å teste at elevene dine har plukket opp all ny informasjon i nivået kan du la dem ta en quiz.\nQuizen inneholder 10 flervalgsspørsmål om det nye konseptet og kommandoene i det nivået.\nDet er ikke alle nivåer som har en quiz enda, vi holder fortsatt på å bygge quizene.\n"
    -   text: "Avslutt undervisningstimen ved å ha en kort evaluering av timen. Hva lærte elevene? Hvilke vanskeligheter møtte de på?\nHvordan lærte de av feilene de gjorde? Og selvfølgelig; Hva laget de?\nElevene er ofte svært stolt av det de har laget, så det er kjekt å sette av litt ekstra tid til å gi elevene muligheten til å vise det de har gjort til klassekameratene sine.\n"
-   title: Vanlige feil
    key: common_mistakes
    levels:
    -   sections:
        -   title: Elevene glemmer hvordan man skriver kommandoer
            example:
                error_code: "Hedy kan ikke skrive dette\n"
                solution_code: "skriv Hedy kan skrive dette!\n"
        -   example:
                error_text: "Kommandoene fungerer ikke hvis de har stor forbokstav\n"
                solution_text: "Fjern den store forbokstaven\n"
        -   title: Elevene bruker 'ekko' uten 'spør'
            example:
                error_code: "ekko Ditt navn er\n"
                solution_code: "spør Hva heter du?\nekko Ditt navn er\n"
        -   example:
                error_text: "Og de har rett til det! Derfor skal de lære hvordan de kan bruke variabler i neste nivå.\n"
                solution_text: "I nivå 1 må vi gjøre slik:\n"
        -   title: 'Skilpadden: Eleven lar skilpadden vandre ut av skjermen'
            example:
                error_code: "frem 300\nsnu 90\n"
                solution_code: "frem 100\nsnu 90\n"
        -   example:
                error_text: "Bak/bakover/tilbake er ikke en kommando\n"
                solution_text: "For å få skilpadden til å gå bakover kan du bruke frem-kommandoen og et negativt tall. For eksempel:\n"
    -   level: '2'
        sections:
        -   example:
                error_text: "Hedy klarer ikke å gjennkjenne kommandoer med skrivefeil i.\n"
                solution_text: "Lær elevene dine å lese feilmeldingene. På denne måten kan de selv finne ut av hva som gikk gale.\n"
        -   title: Eleven glemmer at spør-kommandoen har endret seg
            example:
                error_code: "spør Hva vil du ha å spise?\n"
                solution_code: "bestilling er spør Hva vil du ha å spise?\n"
        -   example:
                error_text: "For noen elever kan det være frustrerende å lære at ekko-kommandoen ikke fungerer lengre. Det er derfor veldig viktig å forklare fordelene med å bruke variabler. Du kan for eksempel si at man kan bruke flere variabler i en kode og at man kan putte dem hvor man vil i en setning!\n"
                solution_text: "Bruk en variabel isteden:\n"
        -   title: Eleven bruker et variabelnavn som et vanlig ord
            example:
                error_code: "navn er Hedy\nskriv Hei mitt navn er navn\n"
                solution_code: "navn er Hedy\nskriv Hei jeg heter navn\n"
        -   example:
                error_text: "En variabelnavn må være et ord. Man kan bruke understrek for å sette sammen to ord, det teller som et ord.\n"
                solution_text: "Legg til en understrek:\n"
        -   title: Elever bruker av og til to forskjellige navn for den samme variabelen
            example:
                error_code: "hest er spør Hva heter hesten din?\nskriv Hesten din heter navn\n"
                solution_code: "navn er spør Hva heter hesten din?\nskriv Hesten din heter navn\n"
    -   sections:
        -   title: Eleven prøver å skrive ut hele lister
            example:
                error_code: "handleliste er epler, melk, sjokolade\nskriv handleliste\n"
                solution_code: "skriv epler, melk, sjokolade\n\neller\n\nhandleliste er epler, melk, sjokolade\nskriv handleliste på tilfeldig\n"
        -   example:
                error_text: "Problemet oppsto antageligvis i nivå 2 også. Nå kan det skje for lister også:\n"
                solution_text: "Ikke bruk variabel- eller listenavn som vanlig tekst. I nivå 4 løses dette problemet med fnutter (apostrofer).\n"
        -   title: Eleven glemmer 'på' i 'på tilfeldig'
            example:
                error_code: "fugler er spurv, måke, hakkespett\nskriv fugler tilfeldig\n"
                solution_code: "fugler er spurv, måke, hakkespett\nskriv fugler på tilfeldig\n"
        -   example:
                error_text: "Eller så skriver de 'på tilfeldig' på begynnelsen av linjen:\n"
                solution_text: "Vær tydelig med elevene dine og si at man alltid må bruke skriv-kommandoen for å skrive ut tekst.\n"
        -   title: Eleven glemte å bruke komma i listen sin
            example:
                error_code: "pizzaer er funghi tonno quattro stagioni\nskriv pizzaer på tilfeldig\n"
                solution_code: "pizzaer er funghi, tonno, quattro, stagioni\nskriv pizzaer på tilfeldig\n"
        -   example:
                error_text: "For eksempel:\n"
                solution_text: "Hedy kan ikke skrive noe tilfeldig, fordi det ikke fins en liste å velge noe tilfeldig fra.\n"
        -   title: 'Elever prøver å bruke legg/fjern uten en liste '
            example:
                error_code: "navn er Jakob\nditt_navn er spør Hvem er du?\nlegg ditt_navn til navn\nskriv navn på tilfeldig\n"
                solution_code: "navn er Jakob, Ramona\nditt_navn er spør Hvem er du?\nlegg ditt_navn til navn\nskriv navn på tilfeldig\n"
        -   example:
                error_text: "Uten til/fra vil ikke legg/fjern kommandoene fungere.\n"
                solution_text: "Hedy må vite hvilken liste elementet skal legges til i eller fjernes fra.\n"
    -   level: '4'
        sections:
        -   example:
                error_text: "I dette nivået krever skriv og spør at du bruker fnutter rundt tekststrenger. En før teksten og en etter.\n"
                solution_text: "Legg til riktige fnutter.\n"
        -   example:
                error_code: "skriv `Velkommen til restauranten`\nmatrett er spør \"Hva ønsker du å bestille?\"\n"
                solution_text: "Dette er de korrekte apostrofene:\n"
            title: Eleven bruker feil apostrof-tegn
        -   example:
                error_text: "Fra dette nivået er det ikke mulig å bruke fnutter. De brukes ofte i norsk når man skriver enkelte forkortninger samt ord som leses bokstav for bokstav eller ord som har s-, x- eller z-ending. (Mer vanlig på engelsk med fnutter)\n"
                solution_text: "Du kan velge å bruke feil gramatikk, eller fjerne apostrofen. Eventuelt kan du bruke ` som en apostrof:\n"
    -   sections:
        -   title: Eleven glemmer å bruke skriv-kommandoen sammen med hvis-kommandoen
            example:
                error_code: "hvis navn er Hedy 'Kjempebra!'\nellers 'Hedy er bedre!'\n"
                solution_code: "hvis navn er Hedy skriv 'Kjempebra!'\nellers skriv 'Hedy er bedre!'\n"
        -   example:
                error_text: "I dette eksempelet har studenten brukt 'hest' og 'navn' for den samme variabelen:\n"
                solution_text: "Sjekk alltid at variabler har samme navn gjennom hele kodeflyten. Små forskjeller kan være vanskelig å legge merke til (eks. entall/flertall) men det vil føre til feil i koden.\n"
        -   title: Elevene glemmer fortsatt apostrof på begge sider
            example:
                error_code: "hvis navn er Hedy skriv morro\nellers skriv 'meh!\n"
                solution_code: "hvis navn er Hedy skriv 'morro'\nellers skriv 'meh!'\n"
        -   example:
                error_text: "På dette nivået skal det ikke være fnutter rundt variabel navn.\n"
                solution_text: "Fjern apostrofene for å få koden til å fungere:\n"
        -   title: Eleven bruker lange variabelnavn bestående av to ord
            example:
                error_code: "valgt dør er spør 'Hvilken dør velger du?'\n"
                solution_code: "valgt_dør er spør 'Hvilken dør velger du?'\n"
        -   example:
                error_text: "Eksempel: Denne eleven vil at Hedy skal fortelle alle vennene hennes at de er morsom, men ikke de andre klassekameratene hennes.\n"
                solution_code: "venner er Mari, Silje, Samira\nnavn er spør 'Hvem er du?'\nhvis navn i venner skriv 'Du er morsom'\nellers skriv 'Du er ikke morsom'\n\neller\n\nnavn er spør 'Hvem er du?'\nhvis navn er Mari skriv 'Du er morsom'\nhvis navn er Silje skriv 'Du er morsom'\nhvis navn er Samira skriv 'Du er morsom'\n"
        -   title: Eleven setter variabelnavnet til det samme som verdien i hvis-utsagnet
            example:
                error_code: "passord er spør 'Hva er passordet?'\nhvis passord er passord skriv 'Korrekt!'\nellers 'Feil passord'\n"
                solution_code: "hemmelig_passord er spør 'Hva er passordet?'\nhvis hemmelig_passord er passord skriv 'Korrekt!'\nellers 'Feil passord'"
    -   level: '6'
        sections:
        -   example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                solution_text: "In this code the output screen will print '10'.\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
                solution_text: "Or take it a step further like this.\n"
    -   sections:
        -   example:
                solution_text: "This is the correct code:\n"
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
        -   title: Students try to repeat multiple lines
            example:
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
        -   example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                solution_text: "Make sure the codes aren't too long\n"
        level: '7'
    -   sections:
        -   example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   example:
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
        level: '8'
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
    -   sections:
        -   example:
                solution_text: "The word animals in the last line should be changed into animal.\n"
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
        -   title: Students forget the indentation
            example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
    -   sections:
        -   example:
                error_text: "Make sure that the students use indentation.\n"
                solution_text: "This is the correct code:\n"
            title: Students forget to use indentation
        -   example:
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
        level: '11'
    -   sections:
        -   title: Students forget quotation marks
            example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   example:
                solution_text: "This is the correct code:\n"
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                solution_text: "This is the correct code:\n"
                error_code: "print 2,5 + 2,5\n"
    -   sections:
        -   title: Students confuse `and` with `or`
            example:
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   sections:
        -   example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                solution_text: "This is the correct code:\n"
        -   example:
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
            title: Students use the wrong signs for `!=` `<=` and `>=`
        -   example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                solution_text: "This is the correct code:\n"
        level: '14'
    -   sections:
        -   title: Students forget indentation in the while loop
            example:
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   sections:
        -   example:
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students use the wrong brackets
            example:
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
            title: Students still use the old at random command
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
        level: '16'
    -   sections:
        -   example:
                solution_text: "This is the correct code:\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
            title: Students use elif like else, so without a condition
        -   example:
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
    -   level: '18'
        sections:
        -   example:
                error_text: "Students will forget to put brackets around their text.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students will still use the ask command
            example:
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                solution_text: "This is the correct code:\n"
    intro: "Du kan lære av å gjøre feil, spesielt i kodeverden!\nÅ gjøre feil er uungåelig, og en fantastisk mulighet til å lære, men det kan være en utfordring for deg som lærer å finne den rette løsningen for en feil!\nSpesielt når koden blir lengre og lengre utover i nivåene. Derfor har vi laget en liste med vanlige feil som gjøres i nivåene, og hvordan man løser de!\n"
    subsections:
    -   title: Teaching with Hedy
        text: "Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.\nThis gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.\nWe use this structure in our lessons: Introduction, New concepts and commands, let's get to work, puzzels and quizzes.\n"
    -   title: Slides
        text: "**COMING SOON** Here you'll soon find slides to use in your lessons.\n"
    -   text: "You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?\nThis way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.\n"
        title: Introduction
    -   title: Introduction of new concepts and commands
        text: "The new concepts and commands can be very hard for some students to fully understand.\nThat's why it's of importance to model the proper use of the new commands to your students.\nEspecially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.\nShowing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').\n"
    -   title: Let's get to work
        text: "Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.\nThe following tabs are adventures that the students can try out and make their own.\nThe adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.\nThe last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.\nThey don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.\nThe example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.\nStimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.\n"
    -   title: Quizzes and puzzels
        text: "To test whether your students have picked up all the new info in the level, you can let them make the quiz.\nThe quiz contains 10 multiple choice questions about the new concepts and command to that level.\nNot every level has a quiz yet, as we are still building the quizzes.\nSome levels also contain puzzels. Puzzels show the students a couple of line of code that the students have to put in the right order.\n\nThis [video](https://www.youtube.com/watch?v=lNh5EdZVUwc) shows the quizzes and puzzels.\n"
    -   title: Evaluation
        text: "Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?\nHow did they learn from their mistakes? And of course: What did they create?\nStudents are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.\n"
-   subsections:
    -   title: Teacher Statistics
        text: "This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.\n"
    -   title: Make your own adventure
        text: "It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).\n"
    -   title: Explore page
        text: "On the [explore](https://hedycode.com/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.\nYou can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.\nDon't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.\nIf you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).\n"
    -   title: My achievements
        text: "If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedycode.com/my-achievements). On this page you achievements are collected. Your students have such a page as well.\nWhen you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.\nIf you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).\n"
    -   title: High Scores
        text: "On [this page](https://hedycode.com/highscores) you can see the high scores of all Hedy users.\nIn this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.\n"
    -   title: Debugger
        text: "Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.\nThe debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.\nHave you found the mistake? Press the red stop button and the debugger will shut off.\n"
    -   title: Read aloud
        text: "Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.\n"
    -   title: Programmers mode
        text: "Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.\nProgrammers mode allows you and your students to use a bigger coding screen.\n"
    -   title: Other useful features
        text: "This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyboard switcher.\n"
    title: Extra Hedy features
    key: features
-   levels:
    -   level: '1'
        sections:
        -   title: Students forget to type commandos
            example:
                error_text: "For example they type a sentence without using print.\n"
                error_code: "Hedy can't print this\n"
                solution_text: "Teach your students to always start a line of code with a command.\n"
                solution_code: "print Hedy can print this!\n"
        -   title: Students use capitals when typing commands
            example:
                error_text: "Commands won't work if they are in capitals.\n"
                error_code: "Ask Why does my code fail?\nPrint Because I'm using capitals.\n"
                solution_text: "Remove the capitals.\n"
                solution_code: "ask Why does my code work now?\nprint Because I removed the capitals!\n"
        -   title: Students use echo without ask
            example:
                error_text: "Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.\n"
                error_code: "echo Your name is\n"
                solution_text: "Add an ask command to make it work.\n"
                solution_code: "ask What's your name?\necho Your name is\n"
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_text: "And they are right! That's why they will learn to use proper variables in the next level.\n"
                error_code: "ask Which programming language is the most fun?\necho is the best!\n"
                solution_text: "In level 1 we have to keep it at this:\n"
                solution_code: "ask Which programming language is the most fun?\necho The best is...\n"
        -   title: 'Turtle: Students let the turtle walk off of the screen'
            example:
                error_text: "Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.\n"
                error_code: "forward 300\nturn 90\n"
                solution_text: "In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.\n"
                solution_code: "forward 100\nturn 90\n"
        -   title: "Turtle: Students use the command backward, but that doesn't exist"
            example:
                error_text: "Backward is not a command.\n"
                error_code: "backward 100\n"
                solution_text: "To make the turtle go backwards, you use the forward command and a negative number. For example:\n"
                solution_code: "forward -100\n"
    -   sections:
        -   title: Students make typos in their commands
            example:
                solution_text: "Teach your students to read the error messages. This way they can find out themselves what went wrong.\n"
                error_text: "Hedy can't recognize a command with a typo.\n"
                error_code: "prinnt Don't make typos!\n"
                solution_code: "print Don't make typos!\n"
        -   example:
                error_code: "ask what would you like to eat?\n"
                solution_text: "In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.\n"
                error_text: "In this level students learn about variables. The ask command requires a variable as well, but students forget this.\n"
                solution_code: "order is ask What would you like to eat?\n"
            title: Students forget that the ask command has changed
        -   title: 'Students try to use the echo command '
            example:
                error_text: "For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!\n"
                error_code: "answer is ask Why doesn't echo work anymore?!\necho\n"
                solution_text: "Use a varible instead.\n"
                solution_code: "answer is ask Why doens't echo work anymore?!\nprint answer\n"
        -   title: Students use a variable name or as a normal word
            example:
                error_text: "In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.\n"
                error_code: "name is Hedy\nprint Hi my name is name\n"
                solution_text: "So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n"
        -   title: Students use long variable names containing two words.
            example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                error_code: "chosen door is ask Which door do you pick?\n"
                solution_text: "Add an underscore.\n"
                solution_code: "chosen_door is ask which door do you pick?\n"
        -   title: Students might use two different names for the same variable
            example:
                error_text: "In this example the student has used 'horse' and 'name' for the same variables.\n"
                error_code: "horse is ask What is your horse called?\nprint Your horse is called name\n"
                solution_text: "Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.\n"
                solution_code: "name is ask What is your horse called?\nprint Your horse is called name\n"
        level: '2'
    -   level: '3'
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: "A list can't be printed. You can only print one item from the list with at random.\n"
                error_code: "groceries is apples, milk, chocolate\nprint groceries\n"
                solution_text: "To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.\n"
                solution_code: "print apples, milk, chocolate\n\nor\n\ngroceries is apples, milk, chocolate\nprint groceries at random\n"
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: "This problem probably occured in level 2 as well. Now it can happen with lists too.\n"
                error_code: "name is Hedy\nprint Hi my name is name\n\nor\n\nanimal is rhino, bee, swan\nprint The best animal is... animal at random\n"
                solution_text: "Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n\nor\n\nanimals is rhino, bee, swan\nprint The best animal is... animals at random\n"
        -   title: Students forget at in at random
            example:
                error_text: "Like in the example\n"
                error_code: "birds is sparrow, seagull, robin\nprint birds random\n"
                solution_text: "This problem is solved by adding the word at.\n"
                solution_code: "birds is sparrow, seagull, robin\nprint birds at random\n"
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: "Or they will sometimes put at random at the beginning of the line.\n"
                error_code: "fruit is apple, cherry, banana\nfruit at random\n"
                solution_text: "Emphasize to your students that you always need a print to print text.\n"
                solution_code: "fruit is apple, cherry, banana\nprint fruit at random\n"
        -   title: Students forget to use commas in their lists
            example:
                error_text: "In a list items are seperated with a comma.\n"
                error_code: "pizzas is funghi tonno quattro stagioni\nprint pizzas at random\n"
                solution_text: "After each item on your list, there should be a comma\n"
                solution_code: "pizzas is funghi, tonno, quattro stagioni\nprint pizzas at random\n"
        -   example:
                error_code: "clubs is Manchester United\nprint clubs at random\n"
                solution_text: "Hedy can't print anything at random, because there is no list to choose from.\n"
                solution_code: "clubs is Manchester United, Bayrn Munchen, FC Barcelona\nprint clubs at random\n"
                error_text: "For example\n"
            title: Students try to use at random without a list
        -   example:
                solution_text: "There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.\n"
                error_text: "In the example below 'names' is not a list, but a variable. You cannot add anything to it.\n"
                error_code: "names is Jake\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
                solution_code: "names is Jake, Amy\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
            title: 'Students try to use add/remove without a list '
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: "Without to/from the add/remove command won't work.\n"
                error_code: "adventures is story, parrot, dice\nchoice is Which adventure do you like best?\nadd choice\nremove dice\nprint I love adventures at random\n"
                solution_text: "Hedy has to know which list the item should be added to/removed from.\n"
                solution_code: "adventures is story, parrot, dice\nchoice is Which adventure do you like best?\nadd choice to adventures\nremove dice from adventures\nprint I love adventures at random\n"
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: "In this level print and ask need a set of quotation marks. One before of the text and one after.\n"
                error_code: "print Hello\nmood is ask 'How are you?\n"
                solution_text: "Add the correct quotation marks.\n"
                solution_code: "print 'Hello'\nmood is ask 'How are you?'\n"
        -   title: Students use the wrong quotation marks
            example:
                solution_code: "print 'Welcome to the restaurant'\nfood is ask 'What would you like to order?'\n"
                error_text: "It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the \"double quotes\" or the skewed one `.\n"
                error_code: "print `Welcome to the restaurant`\nfood is ask \"What would you like to order?\"\n"
                solution_text: "These are the correct quotation marks:\n"
        -   title: Students use an apostrophe in their text
            example:
                error_text: "From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.\n"
                error_code: "print 'You're not allowed to type this'\n"
                solution_text: "You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.\n"
                solution_code: "print 'Youre allowed to type this'\nprint 'And you`re able to do this'\n"
    -   level: '5'
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: "After students use if or else they forget to use a second command like print or ask.\n"
                error_code: "if name is Hedy 'Great!'\nelse 'Hedy is better!'\n"
                solution_text: "Add the print command to fix it.\n"
                solution_code: "if name is Hedy print 'Great!'\nelse print 'Hedy is better!'\n"
        -   title: Students might use two different names for the same variable
            example:
                error_text: "In this example the student has used 'horse' and 'name' for the same variables.\n"
                error_code: "horse is ask 'What is your horse called?'\nif name is Bonfire print 'cool'\nelse print 'less cool!'\n"
                solution_text: "Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.\n"
                solution_code: "horse is ask 'What is your horse called'\nif horse is Bonfire print 'cool!'\nelse print 'less cool!'\n"
        -   title: Students still forget the quotes on both sides
            example:
                error_text: "Codes using the `if` commando can get very long and students tend to forget to use quotes.\n"
                error_code: "if name is Hedy print fun\nelse print 'meh!\n"
                solution_text: "Always use 2 quotes in a print command.\n"
                solution_code: "if name is Hedy print 'fun'\nelse print 'meh!'\n"
        -   title: Students use quotes around variable names
            example:
                error_text: "In this level there are no quotes around variable names.\n"
                error_code: "if 'name' is 'Hedy' print 'fun'\nelse print 'meh!'\n"
                solution_text: "Remove the quotes to get the code to work.\n"
                solution_code: "if name is Hedy print 'fun'\nelse print 'meh!\n"
        -   title: Students use long variable names containing two words
            example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                error_code: "chosen door is ask 'Which door do you pick?'\n"
                solution_text: "Add an underscore.\n"
                solution_code: "chosen_door is ask 'which door do you pick?'\n"
        -   title: Students want multiple answers to be correct
            example:
                error_text: "For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.\n"
                error_code: "if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'\n"
                solution_text: "You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.\nAnother solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.\n"
                solution_code: "friends is Jesse, David, Souf\nname is ask 'Who are you?'\nif name in friends print 'You are funny'\nelse print 'You are not funny'\n\nor\n\nname is ask 'Who are you?'\nif naam is Jesse print 'You are funny'\nif naam is David print 'You are funny'\nif naam is Souf print 'You are funny'\n"
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: "In the example below the password is 'password'. This will result in it always being correct.\n"
                error_code: "password is ask 'What is the password?'\nif password is password print 'Access granted'\nelse print 'Acces denied!'\n"
                solution_text: "Pick a different name for your variable.\n"
                solution_code: "secret_password is ask 'What is the password'\nif secret_password is password print 'Access granted!'\nelse print 'Access denied!'\n"
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                error_code: "print '5 + 5'\n"
                solution_text: "In this code the output screen will print '10'.\n"
                solution_code: "print 5 + 5\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:\n"
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
                solution_text: "Or take it a step further like this.\n"
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
    -   sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
                error_code: "repeat 3 times 'For he`s a jolly good fellow'\nrepeat 3 print 'Which nobody can deny!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   example:
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
            title: Students try to repeat multiple lines
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
        level: '7'
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                error_code: "repeat 3 times\nprint 'hello'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times\n    print 'hello'\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
    -   sections:
        -   example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
            title: Students so not use the for command correctly
        -   title: Students forget the indentation
            example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_text: "You should use indentation after a for command.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        level: '10'
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: "Make sure that the students use indentation.\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "This is the correct code:\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   title: Students don't understand the i
            example:
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                error_text: "Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
            title: Students forget quotation marks
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   example:
                solution_code: "print 2.5 + 2.5\n"
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                error_code: "print 2,5 + 2,5\n"
                solution_text: "This is the correct code:\n"
            title: Students use commas instead of periods in decimal numbers
        level: '12'
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: "Indentation is often hard for students.\n"
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   sections:
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
            title: Students forget the brackets
        -   title: Students use the wrong brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
            title: Students forget the quotation marks while focussing on the brackets
        -   title: Students still use the old at random command
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        level: '16'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   title: Students forget the colon
            example:
                error_text: "After each command that requires indentation, a colon should be used.\n"
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
    -   sections:
        -   title: Students forget to use the brackets
            example:
                error_text: "Students will forget to put brackets around their text.\n"
                error_code: "print 'my name is Hedy!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('my name is Hedy!')\n"
        -   title: Students will still use the ask command
            example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   title: Students might use the brackets as quotation marks
            example:
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_text: "This is the correct code:\n"
        level: '18'
    title: Common mistakes
    key: common_mistakes
    intro: "You can learn from your mistakes, especially in coding!\nMaking mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!\nEspecially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.\n"
title: Hedy dokumentasjon
learn-more-sections:
-   title: Liker du Hedy?
    text: "Vi vil gjerne høre fra deg!\n\n[Klikk her for å sende oss en epost](mailto:hello@hedy.org \"About Hedy\")\n"
-   title: Har du funnet en feil?
    text: "[Fortell oss om det på GitHub](https://github.com/hedyorg/hedy/issues/new/choose)\n"
-   title: Har du lyst til å hjelpe?
    text: "Den letteste måten er ved å hjelpe til med [oversettelse av Hedy](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nHer er nåværende status, hjelp oss å ferdigstille et språk, eller legg til et nytt et.\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Oversettelse-status\" /></a>\n"
start-sections:
-   title: Hva er et gradvis programmeringsspråk?
    text: "Å lære seg å programmere kan være vanskelig. Ikke at programmering i seg selv *er* vanskelig! Men det er mange regler man må lære seg, akkurat som når du begynte å lære deg norsk.\nPå samme måte krever det mye øvelse å lære seg programmering.\n\nDisse setningene leser du nok ganske lett. Men husker du når du lærte deg å lese? Da brukte du en del tid bare på å lære hver bokstav!\nDette gjelder også for programmering, det er kanskje vanskelig i begynnelsen, men det blir lettere etterhvert!\n\nDet som er bra med Hedy er at Hedy er *gradvis*. Det betyr at du ikke trenger å lære alle reglene på en gang.\nDe første nivåene har ganske få regler, slik at det er lett å bli vant til programmering.\nFor hvert nivå legger vi til flere regler og kommandoer. Kommandoer er instruksjoner for en datamaskin.\n"
-   title: Hvorfor er Hedy gradvis?
    text: "I denne videoen forklarer Felienne, skaperen av Hedy, hvorfor Hedy er gradvis.\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/fmF7HpU_-9k\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"
-   title: Hvem er Hedy laget for?
    text: "Hedy er laget for alle barn og ungdom som har lyst til å lære programmering! Du trenger bare å være komfortabel med å lese norsk.\n"
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: Trenger jeg erfaring med programmering?
    text: "Nei, det er ikke nødvendig. Men hvis du har programmert med Scratch eller Python, kan noen av kommandoene være kjente.\n"
-   title: Er Hedy gratis?
    text: "Ja! Hedy er også åpen kildekode (Open Source) som betyr at alle som kan programmere kan hjelpe oss å gjøre Hedy bedre.\nDu kan finne koden på [GitHub](https://github.com/hedyorg/hedy).\nHvis du liker Hedy og vil bidra, er vi veldig glade for [donasjoner](https://github.com/sponsors/hedyorg)!\n"
-   title: Må jeg installere noe?
    text: "Nei. Hedy kjører i nettleseren, som er det programmet du bruker for å se på denne siden. Sannsynligvis Chrome, Edge, Firefox eller Safari. Hedy virker også på telefonen din eller nettbrettet ditt."

join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
