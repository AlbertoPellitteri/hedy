title: Hedy 문서
sections:
-   title: "소개"
    key: "인트로"
    subsections:
    -   title: "Hedy가 뭐지?"
        text: |
            Hedy는 텍스트 프로그래밍 언어로, 10~15세 청소년을 위해 특별히 개발되었다.
            스크래치와 같은 아이들을 위한 프로그래밍 언어와는 대조적으로, Hedy는 코드 블록을 사용하지 않고 텍스트 코드를 사용한다.
            그래서 Hedy와 함께라면 실제 프로그래머들처럼 코드를 입력하는 방법을 배울 수 있을 것입니다. 하지만 작은 단계로 장난기 많은 연습을 통해 말이죠.
            이런 방식으로 Hedy는 파이썬과 같은 실제 프로그래밍 언어를 쉽게 접근할 수 있고 대부분 재미있는 방식으로 사용할 수 있다!
            더 알고 싶다면 프로그래밍 언어로서의 Hedy의 발전상을 담은 <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">이 영상</a>을 보면 된다.
    -   title: "대상 청중"
        text: |
            Hedy는 중학생과 중학생(10~15세)을 염두에 두고 개발된다.
            학생들이 잘 읽을 수 있도록 하는 것이 중요하다. 학생들이 적어도 3학년 읽기 레벨을 달성하기 전에는 Hedy부터 시작하지 말 것을 권장한다.
            학생들(그리고 선생님들!)은 Hedy와 함께 시작하기 전에 프로그래밍 경험이 필요하지 않습니다.
    -   title: "Hedy는 어떻게 일하죠?"
        text: |
            Hedy는 새로운 명령어를 가르치는 레벨로 나뉜다. 각 레벨에는 새로 배운 명령어를 연습하기 위한 다양한 모험이 포함되어 있다.
            선생님으로서 학생들에게 어떤 모험이 가능한지 결정하게 된다. 그들이 레스토랑, 계산기, 유령의 집을 이 레벨으로 만들 것인가? 각 단계 내에서, 모험은 가장 쉬운 것부터 가장 어려운 것까지 배열된다.
            그래서 여러분의 학생들은 계속해서 도전을 받게 됩니다. 모험은 학생들이 개별적으로 할 수도 있고, 고전적인 수업에 사용할 수도 있습니다.

            이 모험에는 정보가 부족한 교사들도 Hedy를 사용할 수 있도록 하기 위한 코드 예시도 포함되어 있습니다!
            물론 Hedy는 또한 그들만의 수업 계획과 모험을 만드는 것을 좋아하는 창의적인 선생님들을 만족시켜요!

            특정 레벨의 모든 모험을 프로그래밍한 후 학생들은 퀴즈에서 자신의 지식을 시험할 수 있다.
            수업 페이지에서 학생들의 일과 진행 상황을 추적할 수 있습니다.
    -   title: "장비"
        text: |
            Hedy는 웹 기반이므로 브라우저가 있는 모든 기기(구글 크롬, 파이어폭스, 엣지 등)에서 작동하므로 노트북, 크롬북, 태블릿, 심지어 스마트폰까지 Hedy를 사용하기에 적합하다.
            Hedy와 함께 일하기 전에 아무것도 다운로드 할 필요가 없습니다. 웹사이트에 들어가시면 모든 준비가 완료됩니다!
    -   title: "Hedy 커뮤니티"
        text: |
            <a href="https://discord.gg/8yY7dEme9r " target="_blank">Discord 서버</a>에 가입하신 것을 환영합니다. 이곳은 멋진 프로젝트와 교훈을 보여줄 수 있는 채널, 버그를 보고할 수 있는 채널, 그리고 다른 선생님들과 그리고 Hedy 팀과 이야기할 수 있는 채널이 있습니다.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI " target="_blank">여기서</a> 디스코드 커뮤니티 가입 방법에 대한 동영상을 확인할 수 있다.
-   title: "튜토리얼"
    key: "튜토리얼"
    subsections:
    -   title: "튜토리얼"
        text: |
            (다시) 튜토리얼을 따르시겠습니까? <a href="https://hedycode.com/tutorial" target="_blank">여기를 클릭</a> 하세요.
-   title: "수업 준비"
    key: "준비물"
    subsections:
    -   title: "수업 만들기"
        text: |
            교사로서 학생들을 위한 수업을 만들 수 있다. 이 수업에서 학생들의 계정과 프로그램을 볼 수 있고 학생들의 진행 상황을 관찰할 수 있다.
            <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">이 동영상</a> 은 Hedy에서 클래스를 빠르게 만드는 방법을 보여줍니다.
    -   title: "수업 커스터마이징"
        text: |
            또한 수업을 맞춤형으로 만들어 어떤 모험을 할 수 있는지 선택할 수 있습니다. 이렇게 하면 학생들은 모험의 양과 레벨에 압도되지 않고, 학생들이 연습하기를 원하는 모험에 구체적으로 집중할 수 있습니다.
            <a href="https://www.youtube.com/watch?v=qva9gXBoUwY&t=10s" target="_blank">이 동영상</a> 을 통해 당신의 수업을 커스터마이징 하는 법을 확인해보세요.
    -   title: "학생 계정"
        text: |
            여러분의 학생들이 여러분의 수업에 참여할 수 있는 두 가지 방법이 있습니다: 여러분은 그들을 위해 계정을 만들 수도 있고, 그들이 자신의 계정을 만들 수도 있습니다.

            **학생용 계정을 만듭니다**
            여러분의 수업에 학생들을 추가하는 가장 쉬운 방법은 그들을 위한 계정을 만드는 것입니다. 이것은 '학생 계정 만들기' 버튼을 클릭하고 그들을 위한 사용자 이름과 비밀번호를 기입함으로써 이루어질 수 있습니다.
            학생들은 여러분이 선택한 사용자 이름과 비밀번호로 로그인 할 수 있습니다. 그 후에, 그들이 원한다면 사용자 이름이나 비밀번호를 바꿀 수 있고 여러분의 반에 남아있을 것입니다.
            <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">이 동영상</a>을 통해 가장 빠르고 쉬운 방법으로 학생을 수업에 추가하는 방법을 보여줍니다..

            **학생들이 직접 계정을 만듭니다**
            학생들도 독자 분이 한 것처럼, Hedy 웹사이트에 가서 자신들만의 계정을 만들 수 있습니다. 그들을 수업에 참여시키기 위해서는 단순히 초대 링크를 클릭하기만 하면 됩니다.
            수업 페이지에서 초대 링크를 찾아 학생들에게 보낼 수 있다. 학생들이 링크를 클릭할 때 반드시 Hedy에 로그인해야 원활하게 작동할 수 있음을 유의해야 한다.
            'Invit by username' 버튼을 사용하여 수동으로 학생을 수업에 초대할 수도 있습니다.

    -   title: "기본 언어 설정"
        text: |
            학생들이 프로필을 만들 때 그들은 '선호하는 언어'를 선택하게 되어 있다. Hedy는 항상 이 선택된 언어로 채워질 것이다.
            이 언어를 변경하려면 나중에 '내 계정'과 '내 개인 설정'으로 다시 이동해야 합니다.
            2021년 12월부터 Hedy 계정별로 선호 언어 설정이 의무화된다.
            이 날짜 이전에 계정 또는 학생의 계정이 생성되면 기본 설정 언어가 누락되었다는 메시지가 표시됩니다.
            걱정하지 마세요! '내 프로필'로 이동하여 프로필 설정에 언어를 설정합니다.
            언어를 설정할 때까지 Hedy는 브라우저 언어로 표시되며, 이 언어가 지원되지 않을 경우 영어로 표시됩니다.

            **영어 외 사용자용**
            모험의 언어를 자신의 언어로 바꿀 수 있을 뿐만 아니라 키워드(예: '인쇄' 또는 '묻다')가 어떤 언어로 되어 있어야 하는지도 선택할 수 있다.
            이렇게 하면 학생들에게 영어 키워드로 코딩하는 법을 가르칠 수 있지만, 학생들이 자신의 언어로 프로그래밍하도록 할 수도 있습니다. 예를 들어, 네덜란드 학생들은 '질문' 대신 'vraag' 명령어를 사용할 수 있습니다.

            **비디오**
            <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">이 동영상</a>에서는 선호 언어를 설정하고 키워드를 선호 언어로 변경하는 방법을 보여줍니다..

    -   title: "프로그램 저장중"
        text: |
            로그인하면 프로필 아이콘 옆에 내 프로그램이 표시됩니다.
            이 옵션은 학생들에게도 적용됩니다. 내 프로그램에서 작업한 모든 프로그램을 찾을 수 있습니다.
            기본적으로 프로그램은 코드를 실행할 때 10초마다 기본 이름으로 '내 프로그램'에 저장됩니다
            프로그램의 레벨(예: 스토리 5)을 입력합니다. 프로그램을 새 이름으로 저장하려면 이름 표시줄에 새 이름을 입력합니다.
            현재 탭당 레벨당 하나의 프로그램만 저장할 수 있습니다.

            프로그램 이름 옆에 있는 공유 단추를 사용하여 프로그램을 공유할 수도 있습니다.
            이 프로그램들은 모두가 보고 사용할 수 있도록 <a href="https://hedy.org/explore" target="_blank">탐색 페이지</a>에 게시될 것입니다.
            프로그램을 공유 해제하려면 '내 프로그램'으로 이동하여 '공유 해제'를 클릭합니다.

            종이 평면 아이콘은 프로그램들을 수업의 선생님에게 전달하는데 사용될 수 있다. 전달되었던 프로그램들은 더 이상 편집가능하지 않을 것이다.

-   title: "Hedy와 수업하기"
    key: "수업하기"
    subsections:
    -   title: "Hedy와 수업하기"
        text: |
            Hedy는 각각 다른 새로운 기술을 가르치는 많은 다른 레벨들을 포함하고 있다. 우리는 수업마다 한 레벨씩 가르치는 것을 추천한다.
            이것은 학생들에게 다음 단계로 넘어가기 전에 새로운 명령이나 개념을 완전히 파악하고 그것을 가지고 연습할 수 있는 시간을 줍니다.
            우리는 이 구조를 수업에 사용합니다. 소개, 새로운 개념과 명령, 일을 시작하고, 퍼즐과 퀴즈 등입니다.
    -   title: "슬라이드"
        text: |
            **COMING SOON** 여기서 수업에 사용할 슬라이드를 곧 찾을 수 있습니다.
    -   title: "서론"
        text: |
            학생들의 사전 지식을 활성화함으로써 수업을 시작할 수 있다: 학생들이 그 과목에 대해 이미 알고 있는 것, 이전 수업에서 배운 것, 그리고 지금 배운 것은 어떤 실수를 했는가?
            이렇게 하면 이전에 배운 모든 명령어와 자주 했던 실수들이 새로운 수업을 시작할 때 여러분의 학생들의 기억 속에 새로워집니다.
    -   title: "새로운 개념과 명령어 소개"
        text: |
            새로운 개념과 명령어는 일부 학생들이 완전히 이해하기 매우 어려울 수 있습니다.
            그렇기 때문에 학생들에게 새로운 명령어를 적절하게 사용할 수 있도록 모델링하는 것이 중요합니다.
            특히 일부 학생들이 프로그래밍에 대한 경험이 전혀 없는 하위 단계에서는 새로운 추상적 개념을 이해하기 어려울 수 있다.
            예를 많이 보여주면 추상적인 개념(예: '변수란 무엇인가?')이 더 잘 인식되고 이해하기 쉬워진다('봐, 변수 애완동물이 개로 변했다').
    -   title: "일을 시작하자"
        text: |
            각각의 레벨은 분홍색 탭에서 찾을 수 있는 다른 모험들을 포함한다. 첫 번째 분홍색 탭은 이 레벨의 새로운 명령들을 설명한다.
            다음 탭은 학생들이 직접 해보고 만들어 볼 수 있는 모험입니다.
            모험은 가장 쉬운 것부터 가장 어려운 것까지 배열되어 있으므로 왼쪽에서 시작하여 오른쪽으로 가는 것을 추천합니다.
            마지막 탭 'What's next'는 다음 단계에서 배울 내용에 대한 약간의 티저를 제공한다. 물론 각 단계별로 학생들이 하고 싶은 모험을 선택할 수 있다.
            그들이 항상 모든 모험을 할 필요는 없습니다. 모든 모험은 학생들이 그린 버튼으로 시도해 볼 수 있는 예시적인 코드를 포함합니다.
            예제 코드는 작업 영역에 복사되며, 학생들은 코드를 시험해보고 이를 조정하여 자신의 것으로 만들 수 있습니다.
            학생들이 자신의 아이디어를 추가하고 모험의 다양성을 만들어 냄으로써 학생들이 예시 코드를 자신의 프로젝트로 전환할 수 있도록 자극한다.
    -   title: "퀴즈와 퍼즐"
        text: |
            학생들이 레벨의 모든 새로운 정보를 습득했는지 테스트하기 위해 퀴즈를 보게 할 수 있습니다.
            퀴즈에는 새로운 개념과 그 레벨의 명령어에 대한 객관식 문제 10개가 포함되어 있다.
            아직 퀴즈를 만들고 있기 때문에 모든 레벨에 퀴즈가 있는 것은 아닙니다.
            일부 레벨에는 퍼즐도 포함되어 있습니다. 퍼즐은 학생들이 올바른 순서로 입력해야 하는 몇 줄의 코드를 보여줍니다.

            <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc " target="_blank">이 영상</a>은 퀴즈와 퍼즐을 보여준다.
    -   title: "평가하기"
        text: |
            간단한 평가를 함으로써 여러분의 수업을 마무리하세요. 학생들은 무엇을 배웠나요? 어떤 어려움을 겪었나요?
            그들은 실수로부터 어떻게 배웠을까요? 그리고 물론: 그들은 무엇을 창조했을까요?
            학생들은 종종 자신의 창작물을 매우 자랑스러워하기 때문에, 조금의 시간을 절약하고 학생들에게 그들의 작품을 반 친구들에게 보여줄 수 있는 기회를 주는 것이 좋습니다.
-   title: "추가 Hedy 기능"
    key: "특징들"
    subsections:
    -   title: "교원통계"
        text: |
            <a href="https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s " target="_blank">이 동영상</a>은 교사 통계를 수업에 활용하는 방법에 대한 자세한 내용을 보여준다.
    -   title: "너만의 모험을 만들어라"
        text: |
            교사가 자신만의 모험을 만들어 내는 것도 가능하다. 이 <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4 " target="_blank">동영상</a>은 교사로서 자신만의 모험을 만들어 수업에 추가하는 방법을 보여준다.
    -   title: "탐색페이지"
        text: |
            <a href="https://hedycode.com/explore" target="_blank">탐색 페이지</a>에서 다른 Hedy 사용자들의 작업물을 볼 수 있습니다. 여러분은 그들의 프로그램을 사용해보고 스스로 멋진 것을 창조하기 위한 영감으로 사용할 수 있습니다.
            코딩 화면에서 '코드 저장 및 공유'를 클릭하여 본인이 만든 프로그램을 탐색 페이지에 직접 추가하거나, '내 프로그램'으로 이동하여 '공유'를 클릭할 수도 있다.
            작업 내용을 더 이상 공유하지 않으시겠습니까? '내 프로그램'으로 이동하여 '공유 해제'를 클릭하기만 하면 됩니다.
            탐색 페이지에 대한 자세한 정보를 원하시면 이 <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">비디오</a>를 확인해 보세요.
    -   title: "나의 업적"
        text: |
            화면 오른쪽 상단에 있는 사용자 이름을 클릭하면 내 업적으로 이동할 수 있습니다. 이 페이지에서는 <a href="https://hedycode.com/my-achievements" target="_blank">업적</a>이 수집됩니다. 학생들에게도 이러한 페이지가 있습니다.
            마우스로 배지 위를 맴돌면 배지를 획득하는 방법이 나옵니다. 배지에도 숨겨진 배지가 있는데, 배지를 획득하는 방법을 스스로 찾아봐야 합니다.
            성과에 대한 자세한 정보를 원하시면, 이 <a href="https://www.youtube.com/watch?v=-FjmKejukCs " target="_blank">비디오</a>를 확인하세요.
    -   title: "고득점"
        text: |
            On <a href="www.https://hedycode.com/highscores" target="_blank">this page</a> you can see the high scores of all Hedy users.
            In this <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">video</a>you can learn some more about the high scores.
    -   title: "디버거"
        text: |
            학생 코드가 작동하지 않는 건가요? 오류가 있는 게 분명해요! 디버거를 사용해서 그 오류를 찾을 수 있어요.
            디버거는 코딩 화면의 무당벌레 버튼입니다. 그걸 누르면 코드를 한 줄 한 줄로 실행해 실수를 찾을 수 있습니다.
            실수를 발견했습니까? 빨간색 중지 버튼을 누르면 디버거가 종료됩니다.
    -   title: "큰 소리로 읽다"
        text: |
            프로그램의 출력을 큰 소리로 읽으시길 원하시나요? 그러면 코딩 화면의 '코드 실행' 버튼 아래에 있는 큰 소리로 읽기 기능을 사용할 수 있습니다.
    -   title: "프로그래머 모드"
        text: |
            모든 모험에 정신이 팔려있는 것일까요, 아니면 긴 프로그램을 만들고 싶나요? 그런 다음, 코딩 화면의 하단에 있는 '프로그래머 모드' 스위치를 확인하세요.
            프로그래머 모드를 사용하면 학생과 함께 더 큰 코딩 화면을 사용할 수 있습니다.
    -   title: "치트시트"
        text: |
            모든 레벨에는 이 이모티콘 🤔이 있는 버튼이 있다. 여러분과 여러분의 학생들은 거기서 "사기장"을 찾을 수 있다. 이 사기장에서 여러분은 이 레벨에서 사용할 수 있는 모든 명령어의 정확한 형태를 찾을 수 있다.
            그래서 만약 여러분이 명령이 어떻게 작동하는지 잊어버렸다면, 그냥 치트 시트를 엿보기만 하면 됩니다!
    -   title: "비디오"
        text: |
            이 <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">동영상</a>은 당신에게 치트시트와 키워드 스위처와 같은 Hedy의 더 많은 특징들을 보여준다.
-   title: "연습문제에 대한 답"
    key: to
    intro: |
        모든 연습문제에 대한 답은 'Hedy_answers'라는 사용자 계정의 공개 프로필에서 찾을 수 있다. 우리는 종종 학생들이 자신의 창의성을 답안에 사용하도록 권장하기 때문에, 이러한 답안은 가능한 정답이 어떻게 생겼는지에 대한 지침일 뿐이다.

        'Hedy_answers' 프로필로 이동하려면, <a href="https://hedy.org/user/hedy_answers " target="_blank">여기</a>를 클릭하십시오.
-   title: "흔한 실수"
    key: "흔한_실수"
    intro: |
        여러분은 특히 코딩에서 여러분의 실수로부터 배울 수 있습니다!
        실수를 하는 것은 피할 수 없는 것이고, 배울 수 있는 좋은 기회이지만, 선생님들에게는 실수에 대한 정확한 해결책을 찾는 것이 도전이 될 수 있습니다!
        특히 레벨이 올라갈수록 코드가 점점 길어지기 때문에 레벨별로 실수가 자주 발생하는 리스트와 그 해결책을 만들어 보았습니다.
    levels:
    -   level: '1'
        sections:
        -   title: "학생들이 명령어를 입력하는 것을 잊는다"
            example:
                error_text: |
                    예를 들어 print 명령어를 사용하지 않고 문장을 타이핑한다.
                error_code: |
                    Hedy can't print this
                solution_text: |
                    학생들에게 항상 명령어로 코드 줄을 시작하도록 가르칩니다.
                solution_code: |
                    print Hedy can print this!
        -   title: "학생들은 명령을 입력할 때 대문자를 사용한다"
            example:
                error_text: |
                    명령어가 대문자일 경우 작동하지 않습니다.
                error_code: |
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: |
                    대문자를 제거한다.
                solution_code: |
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: "학생들은 요청 없이 에코를 사용한다"
            example:
                error_text: |
                    echo는 질문 명령 후에 대답을 반복하도록 되어 있다. 질문이 없으면 echo는 아무것도 할 수 없다.
                error_code: |
                    echo Your name is
                solution_text: |
                    ask 명령어를 추가하여 작동시킵니다.
                solution_code: |
                    ask What's your name?
                    echo Your name is
        -   title: "학생들은 그들의 에코 단어(변수)가 문장의 중간에 있기를 원한다"
            example:
                error_text: |
                    그리고 그들이 옳아요! 그래서 그들은 다음 단계에서 적절한 변수를 사용하는 법을 배우게 될 것입니다.
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: |
                    레벨 1에서는 이 상태를 유지해야 합니다:
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: "거북이: 학생들은 거북이를 화면에서 걷게 했습니다"
            example:
                error_text: |
                    종종 학생들은 거북이를 사용할 때 큰 숫자를 시도하는 것을 좋아하는데, 이것은 화살이 화면을 벗어나 걷게 만든다.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    예를 들어, 학생들은 방향 지시가 작동하지 않는다고 생각하는 경향이 있습니다. 작동하더라도 화면 밖에서는 그런 현상을 볼 수 없습니다. 이런 현상이 발생하지 않도록 작은 숫자를 사용하세요.
                solution_code: |
                    forward 100
                    turn 90
        -   title: "거북이: 학생들은 명령어를 거꾸로 사용하지만, 그것은 존재하지 않습니다"
            example:
                error_text: |
                    뒤로 가기는 정확한 명령어가 아닙니다.
                error_code: |
                    backward 100
                solution_text: |
                    거북이를 뒤로 가게 하려면 forward 명령어와 음수를 사용합니다. 예를 들어:
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "학생들은 그들의 명령에 오타를 낸다"
            example:
                error_text: |
                    Hedy는 오타가 있는 명령을 인식하지 못한다.
                error_code: |
                    prinnt Don't make typos!
                solution_text: |
                    학생들에게 오류 메시지를 읽는 법을 가르치세요. 이 방법으로 학생들은 무엇이 잘못되었는지 스스로 알아낼 수 있습니다.
                solution_code: |
                    print Don't make typos!
        -   title: "학생들은 ask 명령이 바뀌었다는 것을 잊어버립니다"
            example:
                error_text: |
                    이 수준에서 학생들은 변수에 대해 배운다. ask 명령어도 변수가 필요하지만 학생들은 이것을 잊어버린다.
                error_code: |
                    ask what would you like to eat?
                solution_text: |
                    이 수준에서는 Hedy에게 답을 저장할 위치를 알려주어야 나중에 사용할 수 있다. 이를 변수라고 한다.
                solution_code: |
                    order is ask What would you like to eat?
        -   title: "학생들은 echo 명령을 사용하려고 한다 "
            example:
                error_text: |
                    일부 학생들에게는 에코 명령이 더 이상 작동하지 않는다는 것을 알게 되면 좌절할 수 있습니다. 그렇기 때문에 변수를 사용하는 것의 장점을 설명하는 것이 매우 중요합니다. 예를 들어, 코드에 여러 개의 변수를 사용할 수 있고, 문장에서 원하는 곳에 변수를 넣을 수 있습니다!
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: |
                    대신 변수를 사용하세요.
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: "학생들은 가변적인 이름을 사용하거나 일반적인 단어로 사용한다"
            example:
                error_text: |
                    아래 예제에서는 'name'이라는 단어가 변수로 사용되지만 정규 텍스트로도 사용된다. 이 코드의 출력은 'Hi my Hedy is Hedy'가 될 것이다.
                error_code: |
                    name is Hedy
                    print Hi my name is name
                solution_text: |
                    그러니까 본문에서 사용하고 싶은 단어를 변수 이름으로 사용하지 마세요. 4단계에서는 따옴표로 풀립니다.
                solution_code: |
                    name is Hedy
                    print Hi I'm name
        -   title: "학생들은 두 단어를 포함하는 긴 변수 이름을 사용한다."
            example:
                error_text: |
                    변수 이름은 하나의 단어로 지어져야 한다. 두 단어를 연결하기 위해 언더스코어( _ )을 사용할 수 있다. 그것은 하나로 계산된다.
                error_code: |
                    선택한 문은 어떤 문을 선택하느냐는 질문이다?
                solution_text: |
                    언더스코어( _ )를 사용합니다.
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   title: "학생들은 같은 변수에 대해 두 개의 다른 이름을 사용할 수 있습니다"
            example:
                error_text: |
                    이 예제에서 학생은 동일한 변수에 대해 '말'과 '이름'을 사용했습니다.
                error_code: |
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: |
                    코드 전체에 걸쳐 변수의 이름이 같은지 항상 확인해야 한다. 약간의 차이는 발견하기 어려울 수 있지만(예: 복수) 코드를 방해한다.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: "학생들은 전체 목록을 print하려고 한다"
            example:
                error_text: |
                    목록을 인쇄할 수 없습니다. {at} {random}(으)로 목록에서 항목 하나만 인쇄할 수 있습니다.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    모든 식료품 목록을 인쇄하려면 {print} 명령 뒤에 입력하기만 하면 됩니다. 그렇지 않으면 목록을 사용하여 {at} {random}이(가) 포함된 하나의 품목을 인쇄할 수 있습니다.
                solution_code: |
                    {print} apples, milk, chocolate

                    or

                    groceries {is} apples, milk, chocolate
                    {print} groceries {at} {random}
        -   title: "학생들은 변수 또는 목록의 이름을 일반 텍스트로 사용합니다"
            example:
                error_text: |
                    이 문제는 레벨 2에서도 발생했을 것이다. 이제 목록에서도 발생할 수 있다.
                error_code: |
                    name {is} Hedy
                    {print} Hi my name is name

                    or

                    animal {is} rhino, bee, swan
                    {print} The best animal is... animal {at} {random}
                solution_text: |
                    print할 때 일반 텍스트의 변수 이름이나 목록을 사용하지 마십시오. 레벨 4에서는 따옴표로 이 문제를 해결합니다.
                solution_code: |
                    name {is} Hedy
                    {print} Hi I'm name

                    or

                    animals {is} rhino, bee, swan
                    {print} The best animal is... animals {at} {random}
        -   title: "학생들은 {at} {random}에서 {at}을 잊어버린다"
            example:
                error_text: |
                    Like in the example
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds {is} sparrow, seagull, robin
                    {print} birds {at} {random}
        -   title: "학생들은 `{at}` `{random}` 명령을 사용할 때 `{print}` 명령을 사용하는 것을 잊어버린다"
            example:
                error_text: |
                    Or they will sometimes put `{at}` `{random}` at the beginning of the line.
                error_code: |
                    fruit {is} apple, cherry, banana
                    fruit {at} {random}
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit {is} apple, cherry, banana
                    {print} fruit {at} {random}
        -   title: "학생들은 그들의 목록에 쉼표를 사용하는 것을 잊는다"
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "학생들은 리스트 없이 `{at}` `{random}`를 사용하려고 한다"
            example:
                error_text: |
                    For example
                error_code: |
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: "학생들은 목록 없이 추가/제거를 사용하려고 합니다 "
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names {is} Jake
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names {is} Jake, Amy
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
        -   title: "학생들이 추가/제거할 때 사용하는 것을 잊어버림"
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice
                    {remove} dice
                    {print} I love adventures {at} {random}
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: "학생들은 본문 양쪽에 따옴표를 사용하는 것을 잊는다"
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: "학생들은 잘못된 따옴표를 사용한다"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: "학생들은 그들의 텍스트에 아포스트로피를 사용한다"
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when typing contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: "학생들이 {if} 명령어에서 {print}를 사용하는 것을 잊어버립니다"
            example:
                error_text: |
                    After students use `{if}` or `{else}` they forget to use a second command like `{print}` or `{ask}`.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: "학생들은 같은 변수에 대해 두 개의 다른 이름을 사용할 수 있습니다"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check whether the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: "학생들은 여전히 양쪽의 인용문을 잊어버린다"
            example:
                error_text: |
                    Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: "학생들은 변수 이름을 중심으로 따옴표를 사용한다"
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: "학생들은 두 단어를 포함하는 긴 변수 이름을 사용한다"
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: "학생들은 여러 개의 답이 맞길 원한다"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "학생들은 변수 이름을 `{if}` 문의 값과 동일하게 만듭니다"
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |
                    secret_password {is} {ask} 'What is the password'
                    {if} secret_password {is} password {print} 'Access granted!'
                    {else} {print} 'Access denied!'
    -   level: '6'
        sections:
        -   title: "학생들은 따옴표 때문에 애를 먹는다"
            example:
                error_text: |
                    Some students struggle with adding quotation marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: |
                    print '5 + 5'
                solution_text: |
                    In this code the output screen will print '10'.
                solution_code: |
                    print 5 + 5
        -   title: "학생들은 변수를 가지고 수학을 한다는 개념에 어려움을 겪는다"
            example:
                error_text: |
                    Some students will find it hard to do maths with variables. Try to show them very simple examples, like:
                error_code: |
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: |
                    Or take it a step further like this.
                solution_code: |
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: "Students forget one of the word of the repeat command, or they forget the print command"
            example:
                error_text: |
                    Make sure that the students know to use both the full repeat command and the print command.
                error_code: |
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: "학생들은 여러 줄을 반복하려고 한다"
            example:
                error_text: |
                    In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: "학생들은 실행하는데 너무 오랜시간이 걸리는 프로그램을 만든다"
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: "학생들은 들여쓰기를 잘못 사용한다"
            example:
                error_text: |
                    Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |
                    repeat 3 times
                    print 'hello'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    repeat 3 times
                        print 'hello'
        -   title: "학생들은 여러 줄을 반복하고 싶을 때 한 줄만 반복한다"
            example:
                error_text: |
                    For instance, in the code below the student wanted to take the drinks order of 3 people. But instead the program asked 3 times, but only wrote down one order.
                error_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: "Students want to nest `{if}` statements, or put `{if}` statements inside a loop"
            example:
                error_text: |
                    In this level students aren't allowed yet to put `{if}` statements inside other `{if}` statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: |
                    This is the correct code for this level:
                solution_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: "학생들은 실행하는데 너무 오랜시간이 걸리는 프로그램을 만든다"
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times
                        print 'This is enough'
        -   title: "학생들은 `{if}` 명령을 사용하여 변수 값이 변수 이름과 동일한지 확인한다"
            example:
                error_text: |
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check whether the variable password is the same as the variable password, so itself. Which means the answer is always yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: |
                    You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `{if} password {is} 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: "학생들은 들여쓰기로 실수를 한다"
            example:
                error_text: |
                    The hardest part about this level is getting the indentation right. Students love nesting `{if}` statements, sometimes even inside other nested `{if}` statements. Keeping track of indentation can get pretty tough.
                error_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: |
                    This is the correct code. Try to keep track of all the different constructions when putting `{if}` statements inside other `{if}` statements.
                solution_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'

    -   level: '10'
        sections:
        -   title: "학생들이 for 명령을 올바르게 사용하지 않음"
            example:
                error_text: |
                    We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: |
                    The word animals in the last line should be changed into animal.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: "학생들은 들여쓰기를 잊어버립니다"
            example:
                error_text: |
                    Students tend to forget to use indentation after a for command.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: |
                    You should use indentation after a for command.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: "학생들이 들여쓰기를 잊어버립니다"
            example:
                error_text: |
                    Make sure that the students use indentation.
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    for i in range 1 to 5
                        print i
        -   title: "학생들은 i를 이해하지 못한다"
            example:
                error_text: |
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    Could just as well be replaced with this code. It works the same.
                solution_code: |
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: "학생들은 따옴표를 잊어버린다"
            example:
                error_text: |
                    Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the `{if}` command.
                error_code: |
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'

                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: "학생들은 계산에 사용하기를 원하는 숫자에 따옴표를 사용한다"
            example:
                error_text: |
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: "학생들은 십진법 숫자의 마침표 대신 쉼표를 사용한다"
            example:
                error_text: |
                    Decimal numbers can be used from this level on, but you can't use commas.
                error_code: |
                    print 2,5 + 2,5
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: "학생들은 `and`와 `or`를 혼동한다"
            example:
                error_text: |
                    Both commands might appear similar, but their functions are very different.
                error_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: |
                    In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: "학생들은 < 및 > 기호를 혼동한다"
            example:
                error_text: |
                    Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: "학생들은 =<=><=><`>를 잘못 표기한다"
            example:
                error_text: |
                    These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: "학생들이 == 사인을 사용하는 것을 잊어버립니다"
            example:
                error_text: |
                    In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: "학생들은 그 동안 들여쓰기를 잊어버립니다"
            example:
                error_text: |
                    Indentation is often hard for students.
                error_code: |
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: "학생들은 괄호를 잊어버린다"
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 잘못된 괄호를 사용한다"
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 괄호에 집중하면서 따옴표를 잊어버린다"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 여전히 옛것을 임의의 명령으로 사용한다"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 괄호에 집중하면서 따옴표를 잊어버린다"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: "Students use `{elif}` like `{else}`, so without a condition"
            example:
                error_text: |
                    The `{elif}` command needs a condition behind it. It cannot be used like `{else}`, without a condition.
                error_code: |
                    color = ask 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}:
                        {print} 'I like green'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: "학생들은 대장을 잊어버린다"
            example:
                error_text: |
                    After each command that requires indentation, a colon should be used.
                error_code: |
                    answer = ask 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: "학생들은 괄호를 사용하는 것을 잊는다"
            example:
                error_text: |
                    Students will forget to put brackets around their text.
                error_code: |
                    print 'my name is Hedy!'
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    print('my name is Hedy!')
        -   title: "학생들은 여전히 ask 명령을 사용합니다"
            example:
                error_text: |
                    The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: "학생들은 괄호를 따옴표로 사용할 수 있다"
            example:
                error_text: |
                    They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: |
                    이것이 정확한 코드입니다:
                solution_code: |
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
start-sections:
-   title: "텍스트 프로그래밍이 쉬워졌습니다!"
    text: |
        전세계의 많은 학교들과 선생님들은 그들의 학생들에게 프로그래밍을 가르치기를 원합니다. 처음에 이것은 종종 비봇 로봇에서 부터 시작하여 장난기 많은 도구들로 이루어집니다
        스크래치 주니어 또는 스크래치. 이러한 도구를 사용한 후 아이들은 종종 파이썬과 같은 더 강력한 텍스트 프로그래밍 언어로 이동하기를 원합니다.

        그러나 파이썬은 영어로만 제공되기 때문에 어렵고 복잡한 프로그래밍 개념과 구문을 학습자가 한 번에 학습해야 하기 때문에 어렵다.
        Hedy는 텍스트 프로그래밍 언어를 쉽게 시작할 수 있는 방법입니다! Hedy는 세 가지 면에서 자유롭게 사용할 수 있고, 오픈 소스이며, 다른 텍스트 프로그래밍 언어와는 다르게 세 가지 면에서 자유롭습니다.

        1. Hedy는 여러 언어를 사용합니다. 당신은 자신의 언어로 Hedy를 사용할 수 있습니다
        2. Hedy는 점진적이기 때문에, 당신은 한 번에 하나의 개념과 그것의 구문을 배울 수 있다
        3. Hedy는 교실을 위해 만들어졌으며, 교사들이 그들의 학생의 경험을 완전히 맞춤화할 수 있게 해준다
-   title: "다국어 프로그래밍"
    text: |
        거의 모든 텍스트 프로그래밍 언어에 영어 키워드 for나 repeat 등이 있지만 Hedy는 모든 언어에서 사용할 수 있습니다! 현재 스페인어, 아랍어, 중국어 간체, 힌디어 등 39개 언어를 지원하고 있습니다. 언어를 사용할 수 없는 경우 언제든지 번역을 시작할 수 있습니다.
-   title: "차근 차근 배우기"
    text: |
        학생들에게 프로그래밍 개념(예: if-else 또는 루프)과 구문(예: 따옴표 또는 둥근 괄호)을 동시에 알려줘야 하기 때문에 프로그래밍 언어를 가르치는 것은 어려울 수 있다. Hedy는 비교적 간단한 문법으로 되어있다. 과학적으로 입증된 교육 방법이다!
-   title: "수업을 위해 만들었습니다"
    text: |
        Hedy는 10세 이상의 아이들에게 적합하며 교실에서 사용할 수 있도록 설계되었다.
        교사들은 무료로 내장된 수업 계획서를 사용할 수 있지만, 자신의 수업을 작성하여 Hedy 사용자 인터페이스에 로드할 수도 있습니다.
-   title: "상황에 맞는 프로그래밍"
    text: |
        Hedy는 가능한 한 가장 넓은 방식으로 프로그래밍을 보여주며, 다양하고 흥미로운 방식으로 사용될 수 있다. Hedy는 디지털과 대화형 이야기, 화면에 보여질 수 있지만 펜 플로터로 그릴 수도 있고 셔츠에 자수를 놓을 수도 있는 다채로운 그림의 창조를 가능하게 하며, 버튼과 키보드 동작으로 게임이나 앱을 만드는 데 사용될 수 있다.
-   title: "Hedy는 무료인가요?"
    text: |
        네! Hedy는 '오픈 소스'인데, 이것은 모든 사람들이 우리가 Hedy를 더 잘 만들도록 도울 수 있다는 것을 의미해요.
        우리의 코드는 <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>에서 찾을 수 있습니다.
        Hedy를 좋아하시고 기부를 원하신다면 저희는 <a href="https://github.com/sponsors/hedyorg" target="_blank">후원금</a>을 받습니다! (그리고 정말 감사합니다)

-   title: "설치할 것이 있나요?"
    text: |-
        아닙니다. Hedy는 브라우저에서 일하는데, 이것은 여러분이 이 페이지를 보는 데 사용하고 있는 프로그램입니다. 아마도 Chrome이나 Edge 또는 Firefox일 것입니다. Hedy는 핸드폰과 태블릿에서도 일을 합니다.
-   title: "Hedy와 함께 가르치려면 프로그래밍 경험이 필요한가요?"
    text: |-
        아니요, 그럴 필요는 없습니다. 모든 개념은 학습자를 위한 슬라이드와 인터페이스에서 설명됩니다.
        무료 교사용 계정을 만들면 교사용 매뉴얼에도 수업 방법에 대한 정보를 얻을 수 있다
        실수도 자주 했구요.

learn-more-sections:
-   title: Hedy 커뮤니티 참여하기
    text: "소식을 들으니 정말 기쁘네요! 저희와 연락할 수 있는 가장 좋은 방법은 <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">디스코드 서버</a>에 가입하는 것입니다.\n\nYou can also [send us an email](mailto:hello@hedy.org \"About Hedy\").\n"
-   title: 잠수!
    text: "Hedy의 철학과 디자인에 대해 더 알고 싶으신가요? 2022년 Felienne가 StrangeLoop Conference에서 한 강연을 확인해보세요::\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n"
-   title: 뉴스속의 Hedy
    text: "2020년 초 Hedy가 출시된 이후 일부 웹사이트와 신문들은 Hedy에 관해 글을 써왔다. 우리는 여기에 목록을 보관하고 있다:\n* [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)\n* [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)\n* [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)\n* [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)\n* [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)\n* [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)\n* [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)\n* [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)\n* [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)\n* [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)\n* [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)\n* [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)\n* [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)\n* [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)\n* [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)\n* [Vives (Dutch), October 2020](images/artikel_vives.pdf) \"Met Hedy stap voor stap leren programmeren\"\n* [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)\n* [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)\n* [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)\n"
join-sections:
-   text: "# Hedy를 지원할 수 있는 방법은 세 가지가 있습니다!\n"
    title: 조연 Hedy
-   title: 언어 향상
    text: "Hedy의 점진적이고 다언어적인 특성은 많은 흥미로운 기술적인 도전들을 만든다.\nFind those issues on <a href=\"https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage\" target=\"_blank\">Github</a>.\n"
-   title: Hedy 번역
    text: "프로그래머 아니에요? 문제없어요! Hedy를 지원하는 또 다른 방법은 <a href=\"https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial\" target=\"_blank\">키워드, 오류 메시지, 모험</a>은 다른 내용을 번역하는 것이다.\n현재 상태입니다. 언어를 완료하거나 새 언어를 추가할 수 있도록 도와주십시오!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: 선생님들이 시작할 수 있도록 도와주세요
    text: "Hedy는 수업시간에 프로그래밍 수업을 제공할 때 선생님들을 지원하기 위해 고안되었습니다. 우리는 수업을 만들고, 수업을 맞춤화하고, 선생님의 학생들이 어떻게 하는지 볼 수 있는 옵션과 같은 구체적인 선생님 특징들을 가지고 있습니다.\n만약 여러분이 Hedy를 좋아한다면, 선생님들이 시작하는 것을 돕기 위해 여러분이 알고 있는 학교에 연락할 수 있습니다! 우리는 <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">discord</a>를 통해 여러분이 학교나 선생님을 찾는 것을 도울 수 있습니다.\n"
