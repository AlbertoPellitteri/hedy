title: Hedy 문서
sections:
-   title: "소개"
    key: "인트로"
    subsections:
    -   title: "Hedy가 뭐지?"
        text: |
            헤디(Hedy)는 텍스트 프로그래밍 언어로, 10~15세 청소년을 위해 특별히 개발되었다.
            스크래치와 같은 아이들을 위한 프로그래밍 언어와는 대조적으로, 헤디는 코드 블록을 사용하지 않고 텍스트 코드를 사용한다.
            그래서 헤디와 함께라면 실제 프로그래머들처럼 코드를 입력하는 방법을 배울 수 있을 것입니다. 하지만 작은 단계로 장난기 많은 연습을 통해 말이죠.
            이런 방식으로 헤디는 파이썬과 같은 실제 프로그래밍 언어를 쉽게 접근할 수 있고 대부분 재미있는 방식으로 사용할 수 있다!
            If you want to know more, you can watch this <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video</a> about the development of Hedy as a programming language.
    -   title: "대상 청중"
        text: |
            Hedy는 중학생과 중학생(10~15세)을 염두에 두고 개발된다.
            학생들이 잘 읽을 수 있도록 하는 것이 중요하다. 학생들이 적어도 3학년 읽기 수준을 달성하기 전에는 헤디부터 시작하지 말 것을 권장한다.
            학생들(그리고 선생님들!)은 헤디와 함께 시작하기 전에 프로그래밍 경험이 필요하지 않습니다.
    -   title: "Hedy는 어떻게 일하죠?"
        text: |
            Hedy는 새로운 명령어를 가르치는 레벨로 나뉜다. 각 레벨에는 새로 배운 명령어를 연습하기 위한 다양한 모험이 포함되어 있다.
            선생님으로서 학생들에게 어떤 모험이 가능한지 결정하게 된다. 그들이 레스토랑, 계산기, 유령의 집을 이 수준으로 만들 것인가? 각 단계 내에서, 모험은 가장 쉬운 것부터 가장 어려운 것까지 배열된다.
            그래서 여러분의 학생들은 계속해서 도전을 받게 됩니다. 모험은 학생들이 개별적으로 할 수도 있고, 고전적인 수업에 사용할 수도 있습니다.

            이 모험에는 정보가 부족한 교사들도 헤디를 사용할 수 있도록 하기 위한 코드 예시도 포함되어 있습니다!
            물론 헤디는 또한 그들만의 수업 계획과 모험을 만드는 것을 좋아하는 창의적인 선생님들을 만족시켜요!

            특정 수준의 모든 모험을 프로그래밍한 후 학생들은 퀴즈에서 자신의 지식을 시험할 수 있다.
            수업 페이지에서 학생들의 일과 진행 상황을 추적할 수 있습니다.
    -   title: "장비"
        text: |
            Hedy는 웹 기반이므로 브라우저가 있는 모든 기기(구글 크롬, 파이어폭스, 엣지 등)에서 작동하므로 노트북, 크롬북, 태블릿, 심지어 스마트폰까지 헤디를 사용하기에 적합하다.
            헤디와 함께 일하기 전에 아무것도 다운로드 할 필요가 없습니다. 웹사이트에 들어가시면 모든 준비가 완료됩니다!
    -   title: "Hedy 커뮤니티"
        text: |
            <a href="https://discord.gg/8yY7dEme9r " target="_blank">Discord 서버</a>에 가입하신 것을 환영합니다. 이곳은 멋진 프로젝트와 교훈을 보여줄 수 있는 채널, 버그를 보고할 수 있는 채널, 그리고 다른 선생님들과 그리고 헤디 팀과 이야기할 수 있는 채널이 있습니다.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI " target="_blank">여기서</a> 디스코드 커뮤니티 가입 방법에 대한 동영상을 확인할 수 있다.
-   title: "튜토리얼"
    key: "튜토리얼"
    subsections:
    -   title: "튜토리얼"
        text: |
            (다시) 튜토리얼을 따르시겠습니까? <a href="https://hedycode.com/tutorial" target="_blank">여기를 클릭</a> 하세요.
-   title: "수업 준비"
    key: "준비물"
    subsections:
    -   title: "수업 만들기"
        text: |
            교사로서 학생들을 위한 수업을 만들 수 있다. 이 수업에서 학생들의 계정과 프로그램을 볼 수 있고 학생들의 진행 상황을 관찰할 수 있다.
            <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">이 동영상</a> 은 Hedy에서 클래스를 빠르게 만드는 방법을 보여줍니다.
    -   title: "수업 커스터마이징"
        text: |
            또한 수업을 맞춤형으로 만들어 어떤 모험을 할 수 있는지 선택할 수 있습니다. 이렇게 하면 학생들은 모험의 양과 수준에 압도되지 않고, 학생들이 연습하기를 원하는 모험에 구체적으로 집중할 수 있습니다.
            <a href="https://www.youtube.com/watch?v=qva9gXBoUwY&t=10s" target="_blank">이 동영상</a> 을 통해 당신의 수업을 커스터마이징 하는 법을 확인해보세요.
    -   title: "학생 계정"
        text: |
            여러분의 학생들이 여러분의 수업에 참여할 수 있는 두 가지 방법이 있습니다: 여러분은 그들을 위해 계정을 만들 수도 있고, 그들이 자신의 계정을 만들 수도 있습니다.

            **학생용 계정을 만듭니다**
            여러분의 수업에 학생들을 추가하는 가장 쉬운 방법은 그들을 위한 계정을 만드는 것입니다. 이것은 '학생 계정 만들기' 버튼을 클릭하고 그들을 위한 사용자 이름과 비밀번호를 기입함으로써 이루어질 수 있습니다.
            학생들은 여러분이 선택한 사용자 이름과 비밀번호로 로그인 할 수 있습니다. 그 후에, 그들이 원한다면 사용자 이름이나 비밀번호를 바꿀 수 있고 여러분의 반에 남아있을 것입니다.
            <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">이 동영상</a>을 통해 가장 빠르고 쉬운 방법으로 학생을 수업에 추가하는 방법을 보여줍니다..

            **학생들이 직접 계정을 만듭니다**
            학생들도 독자 분이 한 것처럼, 헤디 웹사이트에 가서 자신들만의 계정을 만들 수 있습니다. 그들을 수업에 참여시키기 위해서는 단순히 초대 링크를 클릭하기만 하면 됩니다.
            수업 페이지에서 초대 링크를 찾아 학생들에게 보낼 수 있다. 학생들이 링크를 클릭할 때 반드시 헤디에 로그인해야 원활하게 작동할 수 있음을 유의해야 한다.
            'Invit by username' 버튼을 사용하여 수동으로 학생을 수업에 초대할 수도 있습니다.

    -   title: "기본 언어 설정"
        text: |
            학생들이 프로필을 만들 때 그들은 '선호하는 언어'를 선택하게 되어 있다. 헤디는 항상 이 선택된 언어로 채워질 것이다.
            이 언어를 변경하려면 나중에 '내 계정'과 '내 개인 설정'으로 다시 이동해야 합니다.
            2021년 12월부터 헤디 계정별로 선호 언어 설정이 의무화된다.
            이 날짜 이전에 계정 또는 학생의 계정이 생성되면 기본 설정 언어가 누락되었다는 메시지가 표시됩니다.
            걱정하지 마세요! '내 프로필'로 이동하여 프로필 설정에 언어를 설정합니다.
            언어를 설정할 때까지 Hedy는 브라우저 언어로 표시되며, 이 언어가 지원되지 않을 경우 영어로 표시됩니다.

            **영어 외 사용자용**
            모험의 언어를 자신의 언어로 바꿀 수 있을 뿐만 아니라 키워드(예: '인쇄' 또는 '묻다')가 어떤 언어로 되어 있어야 하는지도 선택할 수 있다.
            이렇게 하면 학생들에게 영어 키워드로 코딩하는 법을 가르칠 수 있지만, 학생들이 자신의 언어로 프로그래밍하도록 할 수도 있습니다. 예를 들어, 네덜란드 학생들은 '질문' 대신 'vraag' 명령어를 사용할 수 있습니다.

            **비디오**
            <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">이 동영상</a>에서는 선호 언어를 설정하고 키워드를 선호 언어로 변경하는 방법을 보여줍니다..

    -   title: "프로그램 저장중"
        text: |
            로그인하면 프로필 아이콘 옆에 내 프로그램이 표시됩니다.
            이 옵션은 학생들에게도 적용됩니다. 내 프로그램에서 작업한 모든 프로그램을 찾을 수 있습니다.
            기본적으로 프로그램은 코드를 실행할 때 10초마다 기본 이름으로 '내 프로그램'에 저장됩니다
            프로그램의 수준(예: 스토리 5)을 입력합니다. 프로그램을 새 이름으로 저장하려면 이름 표시줄에 새 이름을 입력합니다.
            현재 탭당 레벨당 하나의 프로그램만 저장할 수 있습니다.

            프로그램 이름 옆에 있는 공유 단추를 사용하여 프로그램을 공유할 수도 있습니다.
            이 프로그램들은 모두가 보고 사용할 수 있도록 <a href="https://hedy.org/explore" target="_blank">탐색 페이지</a>에 게시될 것입니다.
            프로그램을 공유 해제하려면 '내 프로그램'으로 이동하여 '공유 해제'를 클릭합니다.

            종이 평면 아이콘은 프로그램들을 수업의 선생님에게 전달하는데 사용될 수 있다. 전달되었던 프로그램들은 더 이상 편집가능하지 않을 것이다.

-   title: "Hedy와 수업하기"
    key: "수업하기"
    subsections:
    -   title: "Hedy와 수업하기"
        text: |
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons: Introduction, New concepts and commands, let's get to work, puzzels and quizzes.
    -   title: "슬라이드"
        text: |
            **COMING SOON** Here you'll soon find slides to use in your lessons.
    -   title: "서론"
        text: |
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you start introducing the new lesson.
    -   title: "새로운 개념과 명령어 소개"
        text: |
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience with programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').
    -   title: "일을 시작하자"
        text: |
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: "퀴즈와 퍼즐"
        text: |
            To test whether your students have picked up all the new info in the level, you can let them take the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
            Some levels also contain puzzles. Puzzles show the students a couple of line of code that the students have to put in the right order.

            This <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">video</a> shows the quizzes and puzzles.
    -   title: "평가하기"
        text: |
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and give your students the opportunity to show their work to their classmates.
-   title: "추가 Hedy 기능"
    key: "특징들"
    subsections:
    -   title: "교원통계"
        text: |
            This <a href="https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s" target="_blank">video</a> shows you more information on how to use the teacher statistics in your class.
    -   title: "너만의 모험을 만들어라"
        text: |
            It is also possible for teachers to create your own adventure. This <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">video</a> shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: "탐색페이지"
        text: |
            On the <a href="https://hedycode.com/explore" target="_blank">explore page</a> you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">video</a>.
    -   title: "나의 업적"
        text: |
            If you click on your username in the topright corner of your screen, you can go to <a href="https://hedycode.com/my-achievements" target="_blank">My achievements</a>. On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">video</a>.
    -   title: "고득점"
        text: |
            On <a href="www.https://hedycode.com/highscores" target="_blank">this page</a> you can see the high scores of all Hedy users.
            In this <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">video</a>you can learn some more about the high scores.
    -   title: "디버거"
        text: |
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybug button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: "큰 소리로 읽다"
        text: |
            Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: "프로그래머 모드"
        text: |
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: "치트시트"
        text: |
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: "비디오"
        text: |
            이 <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">동영상</a>은 당신에게 치트시트와 키워드 스위처와 같은 헤디의 더 많은 특징들을 보여준다.
-   title: "연습문제에 대한 답"
    key: to
    intro: |
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: "흔한 실수"
    key: "흔한_실수"
    intro: |
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "학생들이 명령어를 입력하는 것을 잊는다"
            example:
                error_text: |
                    For example they type a sentence without using print.
                error_code: |
                    Hedy can't print this
                solution_text: |
                    Teach your students to always start a line of code with a command.
                solution_code: |
                    print Hedy can print this!
        -   title: "학생들은 명령을 입력할 때 대문자를 사용한다"
            example:
                error_text: |
                    Commands won't work if they are in capitals.
                error_code: |
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: |
                    Remove the capitals.
                solution_code: |
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: "학생들은 요청 없이 에코를 사용한다"
            example:
                error_text: |
                    Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: |
                    echo Your name is
                solution_text: |
                    Add an ask command to make it work.
                solution_code: |
                    ask What's your name?
                    echo Your name is
        -   title: "학생들은 그들의 에코 단어(변수)가 문장의 중간에 있기를 원한다"
            example:
                error_text: |
                    And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: |
                    In level 1 we have to keep it at this:
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: "거북이: 학생들은 거북이를 화면에서 걷게 했습니다"
            example:
                error_text: |
                    Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    In the example, students tend to think that the turn command doesn't work. Even though it does work, you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |
                    forward 100
                    turn 90
        -   title: "Turtle: Students use the command backward, but that doesn't exist"
            example:
                error_text: |
                    Backward is not a command.
                error_code: |
                    backward 100
                solution_text: |
                    To make the turtle go backwards, you use the forward command and a negative number. For example:
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "학생들은 그들의 명령에 오타를 낸다"
            example:
                error_text: |
                    Hedy can't recognize a command with a typo.
                error_code: |
                    prinnt Don't make typos!
                solution_text: |
                    Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: |
                    print Don't make typos!
        -   title: "학생들은 ask 명령이 바뀌었다는 것을 잊어버립니다"
            example:
                error_text: |
                    In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: |
                    ask what would you like to eat?
                solution_text: |
                    In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: |
                    order is ask What would you like to eat?
        -   title: "학생들은 echo 명령을 사용하려고 한다 "
            example:
                error_text: |
                    For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: |
                    Use a varible instead.
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: "학생들은 가변적인 이름을 사용하거나 일반적인 단어로 사용한다"
            example:
                error_text: |
                    In the example below the word 'name' is used as a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |
                    name is Hedy
                    print Hi my name is name
                solution_text: |
                    So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name
        -   title: "학생들은 두 단어를 포함하는 긴 변수 이름을 사용한다."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask Which door do you pick?
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   title: "학생들은 같은 변수에 대해 두 개의 다른 이름을 사용할 수 있습니다"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: |
                    Always check whether the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: "학생들은 전체 목록을 인쇄하려고 한다"
            example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with {at} {random}.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a `{print}` command. Else you can use the list to print one item with `{at}` `{random}`.
                solution_code: |
                    {print} apples, milk, chocolate

                    or

                    groceries {is} apples, milk, chocolate
                    {print} groceries {at} {random}
        -   title: "학생들은 변수 또는 목록의 이름을 일반 텍스트로 사용합니다"
            example:
                error_text: |
                    This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |
                    name {is} Hedy
                    {print} Hi my name is name

                    or

                    animal {is} rhino, bee, swan
                    {print} The best animal is... animal {at} {random}
                solution_text: |
                    Don't use the names of variables or lists in regular text to print. In level 4 this problem is solved with quotation marks.
                solution_code: |
                    name {is} Hedy
                    {print} Hi I'm name

                    or

                    animals {is} rhino, bee, swan
                    {print} The best animal is... animals {at} {random}
        -   title: "학생들은 {at} {random}에서 {at}을 잊어버린다"
            example:
                error_text: |
                    Like in the example
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds {is} sparrow, seagull, robin
                    {print} birds {at} {random}
        -   title: "학생들은 `{at}` `{random}` 명령을 사용할 때 `{print}` 명령을 사용하는 것을 잊어버린다"
            example:
                error_text: |
                    Or they will sometimes put `{at}` `{random}` at the beginning of the line.
                error_code: |
                    fruit {is} apple, cherry, banana
                    fruit {at} {random}
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit {is} apple, cherry, banana
                    {print} fruit {at} {random}
        -   title: "학생들은 그들의 목록에 쉼표를 사용하는 것을 잊는다"
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "학생들은 리스트 없이 `{at}` `{random}`를 사용하려고 한다"
            example:
                error_text: |
                    For example
                error_code: |
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: "학생들은 목록 없이 추가/제거를 사용하려고 합니다 "
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names {is} Jake
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names {is} Jake, Amy
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
        -   title: "학생들이 추가/제거할 때 사용하는 것을 잊어버림"
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice
                    {remove} dice
                    {print} I love adventures {at} {random}
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: "학생들은 본문 양쪽에 따옴표를 사용하는 것을 잊는다"
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: "학생들은 잘못된 따옴표를 사용한다"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: "학생들은 그들의 텍스트에 아포스트로피를 사용한다"
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when typing contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: "학생들이 {if} 명령어에서 {print}를 사용하는 것을 잊어버립니다"
            example:
                error_text: |
                    After students use `{if}` or `{else}` they forget to use a second command like `{print}` or `{ask}`.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: "학생들은 같은 변수에 대해 두 개의 다른 이름을 사용할 수 있습니다"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check whether the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: "학생들은 여전히 양쪽의 인용문을 잊어버린다"
            example:
                error_text: |
                    Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: "학생들은 변수 이름을 중심으로 따옴표를 사용한다"
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: "학생들은 두 단어를 포함하는 긴 변수 이름을 사용한다"
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: "학생들은 여러 개의 답이 맞길 원한다"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "학생들은 변수 이름을 `{if}` 문의 값과 동일하게 만듭니다"
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |
                    secret_password {is} {ask} 'What is the password'
                    {if} secret_password {is} password {print} 'Access granted!'
                    {else} {print} 'Access denied!'
    -   level: '6'
        sections:
        -   title: "학생들은 따옴표 때문에 애를 먹는다"
            example:
                error_text: |
                    Some students struggle with adding quotation marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: |
                    print '5 + 5'
                solution_text: |
                    In this code the output screen will print '10'.
                solution_code: |
                    print 5 + 5
        -   title: "학생들은 변수를 가지고 수학을 한다는 개념에 어려움을 겪는다"
            example:
                error_text: |
                    Some students will find it hard to do maths with variables. Try to show them very simple examples, like:
                error_code: |
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: |
                    Or take it a step further like this.
                solution_code: |
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: "Students forget one of the word of the repeat command, or they forget the print command"
            example:
                error_text: |
                    Make sure that the students know to use both the full repeat command and the print command.
                error_code: |
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: "학생들은 여러 줄을 반복하려고 한다"
            example:
                error_text: |
                    In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: "학생들은 실행하는데 너무 오랜시간이 걸리는 프로그램을 만든다"
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: "학생들은 들여쓰기를 잘못 사용한다"
            example:
                error_text: |
                    Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |
                    repeat 3 times
                    print 'hello'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    repeat 3 times
                        print 'hello'
        -   title: "학생들은 여러 줄을 반복하고 싶을 때 한 줄만 반복한다"
            example:
                error_text: |
                    For instance, in the code below the student wanted to take the drinks order of 3 people. But instead the program asked 3 times, but only wrote down one order.
                error_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: "Students want to nest `{if}` statements, or put `{if}` statements inside a loop"
            example:
                error_text: |
                    In this level students aren't allowed yet to put `{if}` statements inside other `{if}` statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: |
                    This is the correct code for this level:
                solution_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: "학생들은 실행하는데 너무 오랜시간이 걸리는 프로그램을 만든다"
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times
                        print 'This is enough'
        -   title: "학생들은 `{if}` 명령을 사용하여 변수 값이 변수 이름과 동일한지 확인한다"
            example:
                error_text: |
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check whether the variable password is the same as the variable password, so itself. Which means the answer is always yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: |
                    You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `{if} password {is} 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: "학생들은 들여쓰기로 실수를 한다"
            example:
                error_text: |
                    The hardest part about this level is getting the indentation right. Students love nesting `{if}` statements, sometimes even inside other nested `{if}` statements. Keeping track of indentation can get pretty tough.
                error_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: |
                    This is the correct code. Try to keep track of all the different constructions when putting `{if}` statements inside other `{if}` statements.
                solution_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'

    -   level: '10'
        sections:
        -   title: "학생들이 for 명령을 올바르게 사용하지 않음"
            example:
                error_text: |
                    We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: |
                    The word animals in the last line should be changed into animal.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: "학생들은 들여쓰기를 잊어버립니다"
            example:
                error_text: |
                    Students tend to forget to use indentation after a for command.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: |
                    You should use indentation after a for command.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: "학생들이 들여쓰기를 잊어버립니다"
            example:
                error_text: |
                    Make sure that the students use indentation.
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    This is the correct code:
                solution_code: |
                    for i in range 1 to 5
                        print i
        -   title: "학생들은 i를 이해하지 못한다"
            example:
                error_text: |
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    Could just as well be replaced with this code. It works the same.
                solution_code: |
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: "학생들은 따옴표를 잊어버린다"
            example:
                error_text: |
                    Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the `{if}` command.
                error_code: |
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'

                solution_text: |
                    This is the correct code:
                solution_code: |
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: "학생들은 계산에 사용하기를 원하는 숫자에 따옴표를 사용한다"
            example:
                error_text: |
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: |
                    This is the correct code:
                solution_code: |
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: "학생들은 십진법 숫자의 마침표 대신 쉼표를 사용한다"
            example:
                error_text: |
                    Decimal numbers can be used from this level on, but you can't use commas.
                error_code: |
                    print 2,5 + 2,5
                solution_text: |
                    This is the correct code:
                solution_code: |
                    print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: "학생들은 `and`와 `or`를 혼동한다"
            example:
                error_text: |
                    Both commands might appear similar, but their functions are very different.
                error_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: |
                    In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: "학생들은 < 및 > 기호를 혼동한다"
            example:
                error_text: |
                    Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: "학생들은 =<=><=><`>를 잘못 표기한다"
            example:
                error_text: |
                    These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: "학생들이 == 사인을 사용하는 것을 잊어버립니다"
            example:
                error_text: |
                    In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: "학생들은 그 동안 들여쓰기를 잊어버립니다"
            example:
                error_text: |
                    Indentation is often hard for students.
                error_code: |
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: "학생들은 괄호를 잊어버린다"
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 잘못된 괄호를 사용한다"
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 괄호에 집중하면서 따옴표를 잊어버린다"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 여전히 옛것을 임의의 명령으로 사용한다"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "학생들은 괄호에 집중하면서 따옴표를 잊어버린다"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: "Students use `{elif}` like `{else}`, so without a condition"
            example:
                error_text: |
                    The `{elif}` command needs a condition behind it. It cannot be used like `{else}`, without a condition.
                error_code: |
                    color = ask 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}:
                        {print} 'I like green'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: "학생들은 대장을 잊어버린다"
            example:
                error_text: |
                    After each command that requires indentation, a colon should be used.
                error_code: |
                    answer = ask 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: "학생들은 괄호를 사용하는 것을 잊는다"
            example:
                error_text: |
                    Students will forget to put brackets around their text.
                error_code: |
                    print 'my name is Hedy!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    print('my name is Hedy!')
        -   title: "학생들은 여전히 ask 명령을 사용합니다"
            example:
                error_text: |
                    The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: |
                    This is the correct code:
                solution_code: |
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: "학생들은 괄호를 따옴표로 사용할 수 있다"
            example:
                error_text: |
                    They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: |
                    This is the correct code:
                solution_code: |
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
start-sections:
-   title: "텍스트 프로그래밍이 쉬워졌습니다!"
    text: |
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: "다국어 프로그래밍"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a new translation.
-   title: "단계별 학습"
    text: |
        Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven way to learn!
-   title: "교실용으로 제작되었습니다"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "상황에 맞는 프로그래밍"
    text: |
        Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to create games or apps with buttons and keyboard actions.
-   title: "Hedy는 한가해?"
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        If you like Hedy and want to contribute, we accept (and are very grateful for) <a href="https://github.com/sponsors/hedyorg" target="_blank">donations</a>!

-   title: "설치할 것이 있나요?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: "Hedy와 함께 가르치려면 프로그래밍 경험이 필요한가요?"
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.

learn-more-sections:
-   title: Hedy 커뮤니티 참여하기
    text: "We love to hear from you! The best way to get in touch with us is by joining our <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">Discord server</a>.\n\nYou can also [send us an email](mailto:hello@hedy.org \"About Hedy\").\n"
-   title: 잠수!
    text: "Want to know more about Hedy's philosophy and design? Check out this talk Felienne gave at the StrangeLoop Conference in 2022:\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n"
-   title: 뉴스속의 Hedy
    text: "2020년 초 Hedy가 출시된 이후 일부 웹사이트와 신문들은 Hedy에 관해 글을 써왔다. 우리는 여기에 목록을 보관하고 있다:\n* [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)\n* [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)\n* [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)\n* [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)\n* [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)\n* [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)\n* [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)\n* [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)\n* [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)\n* [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)\n* [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)\n* [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)\n* [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)\n* [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)\n* [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)\n* [Vives (Dutch), October 2020](images/artikel_vives.pdf) \"Met Hedy stap voor stap leren programmeren\"\n* [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)\n* [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)\n* [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)\n"
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: 조연 Hedy
-   title: 언어 향상
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on <a href=\"https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage\" target=\"_blank\">Github</a>.\n"
-   title: Hedy 번역
    text: "Not a programmer? No problem! Another way to support Hedy is by <a href=\"https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial\" target=\"_blank\">translating keywords, error messages, adventures are other content</a>.\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: 선생님들이 시작할 수 있도록 도와주세요
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">Discord</a>.\n"
