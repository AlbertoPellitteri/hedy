title: Hedy documentation
sections:
-   title: Introduction
    key: intro
    subsections:
    -   title: What's Hedy?
        text: "Hedy is a textual programming language, specifically developed for (pre-)teens (10 to 15 years old).\nIn contrast to programming languages for kids, like Scratch, Hedy doesn't use code blocks but textual code.\nSo with Hedy you'll learn how to type code like the real programmers do, but in small steps with playful exercises.\nThis way Hedy can function as a stepping stone to real programming languages like Python in an accessible and mostly fun way!\nHere you can watch a [video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) about the development of Hedy as a programming language.\n"
    -   title: Target audience
        text: "Hedy is developed with middle school and junior high school students in mind (ages 10 - 15).\nIt's important for the students to be able to read well. We recommend not to start with Hedy before the students have achieved at least a 3rd grade reading level.\nStudents (and teachers!) don't need any programming experience before starting with Hedy.\n"
    -   title: How does Hedy work?
        text: "Hedy is divided into levels, in which new commands are taught.Each level contains a variety of exercises to practice to newly learned commands.\nThe exercises can be done by the students individually, or you can use them in classical instructions. The lesson plans for each level are included in this teacher manual.\nThe lesson plans and exercises are explained step by step, to make sure the less digitally informed teachers should be able to use Hedy too!\nOf course Hedy also caters to the creative teachers that love to make their own lessonplans and exercises!\n"
    -   title: Devices
        text: "Hedy is webbased, which means it works on any device with a browser (Google Chrome, Firefox, Edge etc), so laptops, chromebooks, tablets and even smartphones are suitable to use Hedy.\nThere's no need to download anything before working with Hedy, just go to the website and you're all set!\n"
    -   title: The Hedy Community
        text: "All Hedy teachers, programmers and other fans are welcome to join our [Discord server](https://discord.gg/8yY7dEme9r). This is the ideal place to chat about Hedy: we have channels where you can show your cool projects and lessons, channels to report bugs, and channels to chat with other teachers and with the Hedy team."
-   title: Preparations
    key: preparations
    subsections:
    -   title: Setting preferred language
        text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My profile' and 'My profile' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n"
    -   text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for you students too. In My programs you can find all the codes that have been saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\n\nLet the programming fun begin!\n"
    -   text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My account' and 'My personal settings' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n\n**For non-English speakers**\nNot only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.\nThis way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.\n"
    -   text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   subsections:
    -   title: Teaching with Hedy
        text: "Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.\nThis gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.\nWe use this structure in our lessons:\n"
    -   title: Introduction
        text: "You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?\nThis way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.\n"
    -   title: Introduction of new concepts and commands
        text: "The new concepts and commands can be very hard for some students to fully understand.\nThat's why it's of importance to model the proper use of the new commands to your students.\nEspecially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.\nShowing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').\n"
    -   title: Let's get to work
        text: "Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.\nThe following tabs are adventures that the students can try out and make their own.\nThe adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.\nThe last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.\nThey don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.\nThe example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.\nStimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.\n"
    -   title: Quiz
        text: "To test whether your students have picked up all the new info in the level, you can let them make the quiz.\nThe quiz contains 10 multiple choice questions about the new concepts and command to that level.\nNot every level has a quiz yet, as we are still building the quizzes.\n"
    -   text: "Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?\nHow did they learn from their mistakes? And of course: What did they create?\nStudents are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.\n"
    title: Teaching with Hedy
    key: teaching
-   levels:
    -   sections:
        -   title: Students forget to type commandos
            example:
                error_code: "Hedy can't print this\n"
                solution_code: "print Hedy can print this!\n"
        -   example:
                error_text: "Commands won't work if they are in capitals.\n"
                solution_text: "Remove the capitals.\n"
        -   title: Students use echo without ask
            example:
                error_code: "echo Your name is\n"
                solution_code: "ask What's your name?\necho Your name is\n"
        -   example:
                error_text: "And they are right! That's why they will learn to use proper variables in the next level.\n"
                solution_text: "In level 1 we have to keep it at this:\n"
        -   title: 'Turtle: Students let the turtle walk off of the screen'
            example:
                error_code: "forward 300\nturn 90\n"
                solution_code: "forward 100\nturn 90\n"
        -   example:
                error_text: "Backward is not a command.\n"
                solution_text: "To make the turtle go backwards, you use the forward command and a negative number. For example:\n"
    -   level: '2'
        sections:
        -   example:
                solution_code: "print Don't make typos!\n"
                error_code: "prinnt Don't make typos!\n"
        -   title: Students forget that the ask command has changed
            example:
                error_code: "ask what would you like to eat?\n"
                solution_code: "order is What would you like to eat?\n"
        -   example:
                error_text: "For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!\n"
                solution_text: "Use a varible instead.\n"
        -   title: Students use a variable name or as a normal word
            example:
                error_code: "name is Hedy\nprint Hi my name is name\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n"
        -   example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                solution_text: "Add an underscore.\n"
        -   title: Students might use two different names for the same variable
            example:
                error_code: "horse is ask What is your horse called?\nprint Your horse is called name\n"
                solution_code: "name is ask What is your horse called?\nprint Your horse is called name\n"
    -   sections:
        -   title: Students try to print whole lists
            example:
                error_code: "groceries is apples, milk, chocolate\nprint groceries\n"
                solution_code: "print apples, milk, chocolate\n\nor\n\ngroceries is apples, milk, chocolate\nprint groceries at random\n"
        -   example:
                error_text: "This problem probably occured in level 2 as well. Now it can happen with lists too.\n"
                solution_text: "Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.\n"
        -   title: Students forget at in at random
            example:
                error_code: "birds is sparrow, seagull, robin\nprint birds random\n"
                solution_code: "birds is sparrow, seagull, robin\nprint birds at random\n"
        -   example:
                error_text: "Or they will sometimes put at random at the beginning of the line.\n"
                solution_text: "Emphasize to your students that you always need a print to print text.\n"
        -   title: Students forget to use commas in their lists
            example:
                error_code: "pizzas is funghi tonno quattro stagioni\nprint pizzas at random\n"
                solution_code: "pizzas is funghi, tonno, quattro stagioni\nprint pizzas at random\n"
        -   example:
                error_text: "For example\n"
                solution_text: "Hedy can't print anything at random, because there is no list to choose from.\n"
        -   title: 'Students try to use add/remove without a list '
            example:
                error_code: "names is Jake\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
                solution_code: "names is Jake, Amy\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
        -   example:
                error_text: "Without to/from the add/remove command won't work.\n"
                solution_text: "Hedy has to know which list the item should be added to/removed from.\n"
    -   level: '4'
        sections:
        -   example:
                error_text: "In this level print and ask need a set of quotation marks. One before of the text and one after.\n"
                solution_text: "Add the correct quotation marks.\n"
        -   title: Students use the wrong quotation marks
            example:
                error_code: "print `Welcome to the restaurant`\nfood is ask \"What would you like to order?\"\n"
                solution_code: "print 'Welcome to the restaurant'\nfood is ask 'What would you like to order?'\n"
        -   example:
                error_text: "From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.\n"
                solution_text: "You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.\n"
    -   sections:
        -   title: Students forget to use print in an if command
            example:
                error_code: "if name is Hedy 'Great!'\nelse 'Hedy is better!'\n"
                solution_code: "if name is Hedy print 'Great!'\nelse print 'Hedy is better!'\n"
        -   example:
                error_text: "In this example the student has used 'horse' and 'name' for the same variables.\n"
                solution_text: "Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.\n"
        -   title: Students still forget the quotes on both sides.
            example:
                error_code: "if name is Hedy print fun\nelse print 'meh!\n"
                solution_code: "if name is Hedy print 'fun'\nelse print 'meh!'\n"
        -   example:
                error_text: "In this level there are no quotes around variable names.\n"
                solution_text: "Remove the quotes to get the code to work.\n"
        -   title: Students use long variable names containing two words.
            example:
                error_code: "chosen door is ask 'Which door do you pick?'\n"
                solution_code: "chosen_door is ask 'which door do you pick?'\n"
        -   example:
                error_text: "For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.\n"
                solution_code: "friends is Jesse, David, Souf\nname is ask 'Who are you?'\nif name in friends print 'You are funny'\nelse print 'You are not funny'\n\nor\n\nname is ask 'Who are you?'\nif naam is Jesse print 'You are funny'\nif naam is David print 'You are funny'\nif naam is Souf print 'You are funny'\n"
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_code: "password is ask 'What is the password?'\nif password is password print 'Access granted'\nelse print 'Acces denied!'\n"
                solution_code: "secret_password is ask 'What is the password'\nif secret_password is password print 'Access granted!'\nelse print 'Access denied!'"
    -   level: '6'
        sections:
        -   example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                solution_text: "In this code the output screen will print '10'.\n"
        -   example:
                solution_text: "Or take it a step further like this.\n"
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
            title: Students struggle with the concept of doing maths with a variable
    -   sections:
        -   example:
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students try to repeat multiple lines
            example:
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
        -   example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                solution_text: "Make sure the codes aren't too long\n"
        level: '7'
    -   sections:
        -   example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                solution_text: "This is the correct code:\n"
            title: Students use the indentation wrong
        -   example:
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   example:
                solution_text: "Make sure the codes aren't too long\n"
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
    -   sections:
        -   title: Students so not use the for command correctly
            example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
        -   example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                solution_text: "You should use indentation after a for command.\n"
    -   level: '11'
        sections:
        -   example:
                error_text: "Make sure that the students use indentation.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students don't understand the i
            example:
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   title: Students forget quotation marks
            example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   example:
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                solution_code: "print 2.5 + 2.5\n"
    -   sections:
        -   example:
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                error_text: "Both commands might appear similar, but their functions are very different.\n"
        level: '13'
    -   sections:
        -   title: Students confuse the < and > signs
            example:
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   sections:
        -   title: Students forget indentation in the while loop
            example:
                solution_text: "This is the correct code:\n"
                error_text: "Indentation is often hard for students.\n"
    -   sections:
        -   title: Students forget the brackets
            example:
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
    -   sections:
        -   example:
                solution_text: "This is the correct code:\n"
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
        -   title: Students forget the colon
            example:
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
    -   level: '18'
        sections:
        -   example:
                error_text: "Students will forget to put brackets around their text.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students will still use the ask command
            example:
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                solution_text: "This is the correct code:\n"
    title: Frequently made mistakes
    key: common_mistakes
learn-more-sections:
-   title: Вам нравится Хэди?
    text: "Дайте нам знать!\n\n[Нажмите сюда, чтобы написать нам](mailto:hello@hedy.org \"About Hedy\")\n"
-   title: Нашли проблему?
    text: "[Сообщите нам через Github](https://github.com/hedyorg/hedy/issues/new/choose)\n"
-   text: "Самый простой способ — помочь нам [с переводом Хэди](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nВот текущий статус перевода. Помогите нам закончить перевод на русский или другой язык, или добавьте новый язык, которого нет в списке.\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
    title: Хотите помочь?
start-sections:
-   title: Что такое поэтапный язык программирования?
    text: "Учиться программировать бывает сложно. Это не значит, что программирование сложно само по себе. Однако, как и при изучении русского языка, нужно запоминать правила и практиковаться.\n\nСейчас вы без труда читаете этот текст. Но помните ли вы, как сложно было читать в раннем детстве? Каждая буква давалась с трудом.\nТак же и с программированием: поначалу бывает трудно, но со временем становится проще.\n\nХэди — *поэтапный* язык программирования. Это значит, что вам не придётся изучать все правила с самого начала.\nНа первых нескольких этапах правил не так много, так что вы спокойно привыкнете к самому процессу программирования.\nНа каждом новом этапе добавляется несколько новых правил, так что вы постепенно изучаете всё больше *команд* — инструкций для компьютера.\n"
-   title: Почему Хэди — поэтапный язык?
    text: "В этом видео Фелина, создатель Хэди, объясняет, зачем он сделан поэтапным. Видео пока что доступно только на английском языке.\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/fmF7HpU_-9k\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"
-   title: Для кого сделан Хэди?
    text: "Хэди подойдёт всем детям, которые хотят научиться программировать! Важно, чтобы вы умели бегло читать. Большая часть Хэди пока что не переведена на русский язык. Если вы хорошо понимаете по-английски, вы можете [помочь перевести Хэди на русский](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md).\n"
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: Понадобится ли мне опыт программирования?
    text: "Не обязательно. Однако, если вы уже программировали на Scratch или Python, некоторые команды будут вам знакомы.\n"
-   title: Бесплатен ли Хэди?
    text: "Да! Это так благодаря Лейденскому университету в Нидерландах. Более того, Хэди — язык с открытым исходным кодом. Это значит, что любой, кто умеет программировать, может помочь нам в его разработке.\nИсходный код Хэди доступен на [GitHub](https://github.com/hedyorg/hedy).\nЕсли вам нравится Хэди и вы готовы помочь, мы будем очень благодарны [пожертвованиям](https://github.com/sponsors/hedyorg).\n"
-   title: Нужно ли мне что-то устанавливать?
    text: Нет. Хэди работает в браузере — в той же программе, в которой вы сейчас видите эту страницу. Вероятно, это Chrome, Edge или Firefox. Хэди также работает на телефонах и планшетах.
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
