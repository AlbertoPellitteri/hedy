sections:
-   subsections:
    -   title: What's Hedy?
        text: "Hedy is a textual programming language, specifically developed for (pre-)teens (10 to 15 years old).\nIn contrast to programming languages for kids, like Scratch, Hedy doesn't use code blocks but textual code.\nSo with Hedy you'll learn how to type code like the real programmers do, but in small steps with playful exercises.\nThis way Hedy can function as a stepping stone to real programming languages like Python in an accessible and mostly fun way!\nHere you can watch a [video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) about the development of Hedy as a programming language.\n"
    -   title: Target audience
        text: "Hedy is developed with middle school and junior high school students in mind (ages 10 - 15).\nIt's important for the students to be able to read well. We recommend not to start with Hedy before the students have achieved at least a 3rd grade reading level.\nStudents (and teachers!) don't need any programming experience before starting with Hedy.\n"
    -   text: "Hedy is divided into levels, in which new commands are taught. Each level contains a variety of adventures to practice the newly learned commands.\nAs a teacher, you get to decide which adventures are available for your students. Will they be making a restaurant, a calculator or a haunted house this level? Within each level, the adventures are arranged from easiest to hardest.\nSo your students keep getting challenged. The adventures can be done by the students individually, or you can use them in a classical instruction.\n\nThe adventures also include a code example, to make sure the less digitally informed teachers are able to use Hedy too!\nOf course Hedy also caters to the creative teachers that love to make their own lessonplans and adventures!\n\nAfter programming all the adventures of a certain level, your students can test their knowledge in the quiz.\nYou can track your students' work and their progress on the class page.\n"
        title: How does Hedy work?
    -   title: Devices
        text: "Hedy is webbased, which means it works on any device with a browser (Google Chrome, Firefox, Edge etc), so laptops, chromebooks, tablets and even smartphones are suitable to use Hedy.\nThere's no need to download anything before working with Hedy, just go to the website and you're all set!\n"
    -   title: The Hedy Community
        text: "All Hedy teachers, programmers and other fans are welcome to join our [Discord server](https://discord.gg/8yY7dEme9r). This is the ideal place to chat about Hedy: we have channels where you can show your cool projects and lessons, channels to report bugs, and channels to chat with other teachers and with the Hedy team.\n"
    title: Introduction
    key: intro
-   title: Preparations
    key: preparations
    subsections:
    -   title: Creating a Class
        text: "As a teacher, you can create a class for your students. In this class you can see the students' accounts and their programs and you could monitor their progress.\nYou can also customize your class and choose which adventures are available for them. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.\n"
    -   text: "There are 2 ways to let your students join your class: You can let them make their own accounts or you can create accounts for them.\n\n**Students make their own accounts**\nYour students can go to the Hedy website and create their own accounts, just like you did. To get them into your class, they simply have to click the invite link.\nYou can find the invite link on the class page and send it to your students. Mind that your students have to be logged in to Hedy when they click the link, so make ot work smoothly.\n\n**You create accounts for your students**\nSometimes it's easier to create a whole bunch of accounts for your students yourself. This can be done by clicking the 'create student accounts' button and filling in usernames and passwords for them.\nThe students can login with the username and password that you chose. Afterwards, they can change their username or password if they'd like and they'll still remain in your class.\n"
    -   text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My account' and 'My personal settings' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n\n**For non-English speakers**\nNot only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.\nThis way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.\n"
    -   text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   subsections:
    -   title: Teaching with Hedy
        text: "Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.\nThis gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.\nWe use this structure in our lessons:\n"
    -   title: Introduction
        text: "You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?\nThis way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.\n"
    -   title: Introduction of new concepts and commands
        text: "The new concepts and commands can be very hard for some students to fully understand.\nThat's why it's of importance to model the proper use of the new commands to your students.\nEspecially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.\nShowing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').\n"
    -   text: "Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.\nThe following tabs are adventures that the students can try out and make their own.\nThe adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.\nThe last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.\nThey don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.\nThe example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.\nStimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.\n"
        title: Let's get to work
    -   title: Quiz
        text: "To test whether your students have picked up all the new info in the level, you can let them make the quiz.\nThe quiz contains 10 multiple choice questions about the new concepts and command to that level.\nNot every level has a quiz yet, as we are still building the quizzes.\n"
    -   text: "Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?\nHow did they learn from their mistakes? And of course: What did they create?\nStudents are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.\n"
    title: Teaching with Hedy
    key: teaching
-   levels:
    -   sections:
        -   example:
                error_text: "For example they type a sentence without using print.\n"
                solution_code: "print Hedy can print this!\n"
        -   title: Students use capitals when typing commands
            example:
                error_code: "Ask Why does my code fail?\nPrint Because I'm using capitals.\n"
                solution_code: "ask Why does my code work now?\nprint Because I removed the capitals!\n"
        -   example:
                error_text: "Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.\n"
                solution_text: "Add an ask command to make it work.\n"
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_code: "ask Which programming language is the most fun?\necho is the best!\n"
                solution_code: "ask Which programming language is the most fun?\necho The best is...\n"
        -   example:
                error_text: "Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.\n"
                solution_text: "In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.\n"
        -   title: "Turtle: Students use the command backward, but that doesn't exist"
            example:
                error_code: "backward 100\n"
                solution_code: "forward -100\n"
    -   level: '2'
        sections:
        -   example:
                error_text: "Hedy can't recognize a command with a typo.\n"
                solution_text: "Teach your students to read the error messages. This way they can find out themselves what went wrong.\n"
        -   title: Students forget that the ask command has changed
            example:
                error_code: "ask what would you like to eat?\n"
                solution_code: "order is ask What would you like to eat?\n"
        -   example:
                error_text: "For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!\n"
                solution_text: "Use a varible instead.\n"
        -   title: Students use a variable name or as a normal word
            example:
                error_code: "name is Hedy\nprint Hi my name is name\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n"
        -   example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                solution_text: "Add an underscore.\n"
        -   title: Students might use two different names for the same variable
            example:
                error_code: "horse is ask What is your horse called?\nprint Your horse is called name\n"
                solution_code: "name is ask What is your horse called?\nprint Your horse is called name\n"
    -   sections:
        -   title: Students try to print whole lists
            example:
                error_code: "groceries is apples, milk, chocolate\nprint groceries\n"
                solution_code: "print apples, milk, chocolate\n\nor\n\ngroceries is apples, milk, chocolate\nprint groceries at random\n"
        -   example:
                error_text: "This problem probably occured in level 2 as well. Now it can happen with lists too.\n"
                solution_text: "Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.\n"
        -   title: Students forget at in at random
            example:
                error_code: "birds is sparrow, seagull, robin\nprint birds random\n"
                solution_code: "birds is sparrow, seagull, robin\nprint birds at random\n"
        -   example:
                error_text: "Or they will sometimes put at random at the beginning of the line.\n"
                solution_text: "Emphasize to your students that you always need a print to print text.\n"
        -   title: Students forget to use commas in their lists
            example:
                error_code: "pizzas is funghi tonno quattro stagioni\nprint pizzas at random\n"
                solution_code: "pizzas is funghi, tonno, quattro stagioni\nprint pizzas at random\n"
        -   example:
                error_text: "For example\n"
                solution_text: "Hedy can't print anything at random, because there is no list to choose from.\n"
        -   title: 'Students try to use add/remove without a list '
            example:
                error_code: "names is Jake\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
                solution_code: "names is Jake, Amy\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
        -   example:
                error_text: "Without to/from the add/remove command won't work.\n"
                solution_text: "Hedy has to know which list the item should be added to/removed from.\n"
    -   level: '4'
        sections:
        -   example:
                error_text: "In this level print and ask need a set of quotation marks. One before of the text and one after.\n"
                solution_text: "Add the correct quotation marks.\n"
        -   title: Students use the wrong quotation marks
            example:
                error_code: "print `Welcome to the restaurant`\nfood is ask \"What would you like to order?\"\n"
                solution_code: "print 'Welcome to the restaurant'\nfood is ask 'What would you like to order?'\n"
        -   example:
                error_text: "From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.\n"
                solution_text: "You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.\n"
    -   level: '5'
        sections:
        -   example:
                error_text: "After students use if or else they forget to use a second command like print or ask.\n"
                solution_text: "Add the print command to fix it.\n"
        -   title: Students might use two different names for the same variable
            example:
                error_code: "horse is ask 'What is your horse called?'\nif name is Bonfire print 'cool'\nelse print 'less cool!'\n"
                solution_code: "horse is ask 'What is your horse called'\nif horse is Bonfire print 'cool!'\nelse print 'less cool!'\n"
        -   example:
                error_text: "Codes using the `if` commando can get very long and students tend to forget to use quotes.\n"
                solution_text: "Always use 2 quotes in a print command.\n"
        -   title: Students use quotes around variable names
            example:
                error_code: "if 'name' is 'Hedy' print 'fun'\nelse print 'meh!'\n"
                solution_code: "if name is Hedy print 'fun'\nelse print 'meh!\n"
        -   example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                solution_text: "Add an underscore.\n"
        -   title: Students want multiple answers to be correct
            example:
                error_code: "if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'\n"
                solution_code: "friends is Jesse, David, Souf\nname is ask 'Who are you?'\nif name in friends print 'You are funny'\nelse print 'You are not funny'\n\nor\n\nname is ask 'Who are you?'\nif naam is Jesse print 'You are funny'\nif naam is David print 'You are funny'\nif naam is Souf print 'You are funny'\n"
        -   example:
                error_text: "In the example below the password is 'password'. This will result in it always being correct.\n"
                solution_text: "Pick a different name for your variable.\n"
    -   level: '6'
        sections:
        -   example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                solution_text: "In this code the output screen will print '10'.\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
    -   sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_code: "repeat 3 times 'For he`s a jolly good fellow'\nrepeat 3 print 'Which nobody can deny!'\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   example:
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
        -   title: Students make programs that take too long to run
            example:
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
    -   sections:
        -   example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
        level: '8'
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
    -   sections:
        -   title: Students so not use the for command correctly
            example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                solution_text: "You should use indentation after a for command.\n"
    -   level: '11'
        sections:
        -   example:
                error_text: "Make sure that the students use indentation.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students don't understand the i
            example:
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   title: Students forget quotation marks
            example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_code: "print 2,5 + 2,5\n"
                solution_code: "print 2.5 + 2.5\n"
    -   sections:
        -   title: Students confuse `and` with `or`
            example:
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   sections:
        -   example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                solution_text: "This is the correct code:\n"
        level: '14'
    -   sections:
        -   title: Students forget indentation in the while loop
            example:
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   sections:
        -   title: Students forget the brackets
            example:
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
    -   sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   example:
                error_text: "After each command that requires indentation, a colon should be used.\n"
                solution_text: "This is the correct code:\n"
    -   level: '18'
        sections:
        -   example:
                error_text: "Students will forget to put brackets around their text.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students will still use the ask command
            example:
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                solution_text: "This is the correct code:\n"
    title: Frequently made mistakes
    key: common_mistakes
title: Hedy documentation
learn-more-sections:
-   title: Do you like Hedy?
    text: "We love to hear from you!\n[Click here to send us a message](mailto:hello@hedy.org \"About Hedy\")\n"
-   title: Found a bug?
    text: "[Let us know on GitHub](https://github.com/hedyorg/hedy/issues/new/choose)\n"
-   title: Code week talk
    text: "Want to know more about Hedy? Check out this talk Felienne gave at the European Code Week 2020:\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n"
start-sections:
-   title: "Textual programming made easy!"
    text: |
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Step by step learning"
    text: |
        Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven way to learn!
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Programming in context"
    text: |
        Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to create games or apps with buttons and keyboard actions.
-   title: "Is Hedy free?"
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!

-   title: "Do I need to install anything?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: "Do I need programming experience to teach with Hedy?"
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.

join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
