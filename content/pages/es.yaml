sections:
-   subsections:
    -   title: ¿Qué es Hedy?
        text: "Hedy es un lenguaje de programación textual, específicamente desarrollado para (pre-)adolescentes (entre 10 y 15 años).\nAl contrario que los lenguajes de programación para niños, como Scratch, Hedy no usa bloques de código sino código textual.\nAsí con Hedy aprenderás a escribir código como los programadores de verdad, pero dando pequeños pasos con entretenidos ejercicios.\nDe esta forma Hedy puede funcionar como un escalón hacia los lenguajes de programación reales como Python de una forma accesible y divertida.\nAquí puedes ver un [video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) sobre el desarrollo de Hedy como lenguaje de programación.\n"
    -   title: Público objetivo
        text: "Hedy está desarrollado pensando en los estudiantes de primaria y secundaria (edades 10 - 15).\nEs importante que los estudiantes sean capaces de leer bien. Recomendamos no empezar con Hedy hasta que los estudiantes no tengan al menos el nivel de lectura de 3º.\nLos estudiantes (¡y profesores!) no necesitan ninguna experiencia en programación para empezar con Hedy.\n"
    -   title: ¿Cómo funciona Hedy?
        text: "Hedy se divide en niveles, en los cuales se enseñan nuevos comandos. Cada nivel contiene una variedad de aventuras para practicar los nuevos comandos aprendidos.\nComo profesor/a, tú decides qué aventuras están disponibles a tu alumnos. ¿Harán un restaurante, una calculadora o una casa encantada en este nivel? En cada nivel, las aventuras están ordenadas de mas fácil a difícil.\nDe ésta forma tus estudiantes siempre tienen un reto. Las aventuras pueden realizarse por alumnos individuales o puedes enseñarlas en grupos.\n\nLas aventuras también incluyen un código de ejemplo, para asegurarse que ¡incluso profesores con poca experiencia de programación puedan usar Hedy también!\n¡Por supuesto Hedy también permite a los profesores más creativos que prefieren crear sus propias aventuras!\n\nDespués de resolver todas las aventuras de un nivel concreto, tus alumnos pueden poner a prueba sus conocimientos con la encuesta.\nPuedes revisar el trabajo de tus alumnos y su progreso en la página de la clase.\n"
    -   title: Dispositivos
        text: "Hedy está basado en web, lo que significa que funciona en cualquier dispositivo con un navegador (Google Chrome, Firefox, Edge etc), así que los portátiles, chromebooks, tablets e incluso teléfonos inteligentes son adecuados para usar Hedy.\nNo hay necesidad de descargar nada antes de empezar a trabajar con Hedy, sólo ve a la página web ¡y estás listo!\n"
    -   title: La comunidad de Hedy
        text: "Todos los profesores de Hedy, programadores y otros fans son bienvenidos a unirse a nuestro [Discord server](https://discord.gg/8yY7dEme9r). Este es el lugar ideal para discutir sobre Hedy: tenemos canales donde puedes mostrar tus interesantes proyectos y lecciónes, canales para reportar errores y canales para hablar con otros profesores y con el equipo desarrollador de Hedy.\n"
    title: Introducción
    key: intro
-   title: Preparaciones
    key: preparaciones
    subsections:
    -   title: Creando una clase
        text: "Como profesor, puedes crear una clase para tus estudiantes. En esta clase puedes ver las cuentas de cada uno de los estudiantes y sus programas. También puedes monitorear su progreso.\nEs posible personaliyar tu clase y elegir que aventuras están disponibles. De esta forma, tus estudiantes no serán abrumados por la cantidad de aventuras y niveles, y ellos se puedes enfocar en las aventuras que te gustarían que practiquen.\n"
    -   text: "Hay 2 formas de permitir que tus estudiantes se unan a tu clase: Puedes dejarles crear sus propias cuentas o puedes crearlas por ellos.\n\n**Los estudiantes hacer sus propies cuentas**\nTus estudiantes pueder in a la página web de Hedy y crear su cuenta, igual que tu lo hiciste. Para tenerlos en tu clase, ellos simplemente deber hacer click en el link de la invitación.\nPuedes encontrar el link para invitarlos en la página de la clase y enviarlo a tus estudiantes. Ten en cuenta que tus estudiantes deben estar conectados en Hedy cuando hagan click en el link, para hacer que todo funcione fácilmente.\n\n**Tú creas las cuentas para tus estudiantes**\nAlgunas veces es más fácil que tu crees muchas cuentas para tus estudiantes. Esto se hace al hacer click en el botón 'crear cuentas de estudiantes' y rellenando los nombres de usuarios y contraseñas por ellos.\nLos estudiantes pueden conectarse con el nombre de usuario y contraseña que elegiste. Después, ellos pueden cambiar su nombre de usuario o contraseña si quieren, manteniéndose en tu clase.\n"
    -   text: "Cuando los alumnos crean sus perfiles deben escoger su 'idioma preferido'. Hedy siempre cargará utilizando este idioma.\nEl idioma siempre se podrá modificar a posteriori navegando a ' Mi cuenta' y 'Mis opciones personales'.\nDesde Diciembre 2021, es obligatorio definir tu idioma preferido para cada cuenta de Hedy.\nSi tu cuenta o la cuenta de tus alumnos fue creada antes de esta fecha, recibirás un mensaje notificando de que el idioma preferido no se ha seleccionado.\n¡No te preocupes! Navega a 'Mi perfil' y añade el idioma en tus opciones.\nHasta que selecciones un idioma Hedy se mostrará en el idioma configurado en tu navegador, y cuando ese idioma no esté soportado, en inglés.\n\n**Para no hablantes de la lengua inglesa**\nNo solo puedes cambiar el idioma de las aventuras a tu propio idioma. También puedes cambiar el idioma de los comandos (por ejemplo 'print' o 'ask').\nDe ésta forma puedes enseñar a tus alumnos con los comandos originales en Inglés pero también puedes permitirles utilizar su propio idioma. Por ejemplo, los estudiantes holandeses pueden utilizar 'vraag' en vez de 'ask'.\n"
    -   text: "Como ahora estás identificado, verás el banner azul con Mi perfil y Mis programas.\nEstas pestañas también existen para tus estudiantes. En Mis programas puedes encontrar todo el código que hayas guardado.\n\nPuedes guardar tus proyectos simplemente dándoles un nombre en la barra blanca y apretando el botón verde Guardar Código.\nTú y tus estudiantes podéis compartir los programas. Estos programas se publicarán en nuestra página de explorador, para que todo el mundo pueda verlos y utilizarlos.\nSi no quieres publicar tu programa, ve a 'Mis programas' y haz click en 'No compartir'.\n"
-   subsections:
    -   text: "Hedy contiene muchos niveles diferentes, cada uno de ellos enseña una nueva habilidad. Nosotros recomendamos enseñar un nivel por lección.\nEsto le da suficiente tiempo a tus estudiantes para entender completamente un nuevo comando o concepto y practicar con él, antes de avanyar al siguiente nivel.\nUsamos esta estructura en nuestras lecciónes:\n"
        title: 'Enseñando con Hedy'
    -   title: Introducción
        text: "Puedes empezar tus lecciones recordando a tus alumnos conocimiento previo: ¿Qué es lo que saben sobre el tema?, ¿Qué aprendieron en la lección anterior y qué errores cometieron de los cuales han aprendido?\nDe ésta forma, tus alumnos tendrán en mente todos los comandos aprendidos y los errores comunes cuando empieces una nueva clase.\n"
    -   title: Introducción de nuevos conceptos y comandos
        text: "Los nuevos conceptos y comandos pueden ser muy difíciles de comprender para algunos alumnos.\nPor eso es importante dar un modelo del uso correcto de los comandos a los alumnos.\nEspecialmente en los niveles iniciales cuando un alumno no tiene experiencia ninguna con programación, puede ser difícil para ellos comprender los conceptos abstractos.\nMostrar un montón de ejemplos hace que un concepto abstracto (por ejemplo '¿Qué es una variable?) más fácil de reconocer y entender ('¡Mira!, la variable a cambiado a perro').\n"
    -   title: Vamos a trabajar
        text: "Cada nivel contiene diferentes aventuras que podrás encontrar en las pestañas rosas. La primera pestaña rosa explica los nuevos comandos del nivel.\nLas siguientes pestañas son las aventuras que tus alumnos pueden probar y hacer por sí mismos.\nLas aventuras están ordenadas de fácil a difícil, así que recomendamos empezar por la izquierda hacia la derecha.\nLa última pestaña da una pequeña pista de que aprenderás en el siguiente nivel. Por supuesto, puedes seleccionar las aventuras que quieras que tus alumnos hagan en cada nivel.\nNo siempre tienen que hacer todas las aventuras. Cada aventura contiene un código de ejemplo que los alumnos pueden probar con el botón verde.\nEl código de ejemplo se copia en el area de trabajo, donde los alumnos pueden probar y ajustar a su gusto.\nAnima a tus alumnos a convertir los ejemplos en sus propios proyectos, añadiendo sus propias ideas e introduciendo variaciones a las aventuras.\n"
    -   title: Quiz
        text: "Para evaluar si tus estudiantes han aprendido toda la nueva información en el nivel, puedes permitirles hacer un quiz.\nEl quiz contiene 10 preguntas con respuesta múltiple sobre los nuevos conceptos y comandos del nivel.\nNo todos los niveles tienen un quiz, ya que aún estamos escribiendólos.\n"
    -   text: "Termina tus lecciones haciendo una pequeña evaluación.¿Que aprendieron los estudiantes? ¿Que dificultades encontraron?\n¿Cómo aprendieron de sus errores? y por supuesto: ¿Que crearon?\nLos estudiantes usulamente están muy orgullosos de sus propias creaciones, entonces es importante ahorrar algo de tiempo y darle la oportunidad a tus estudiantes de mostrar su trabajo a sus compañeros.\n"
    title: Enseñando con Hedy
    key: enseñando
-   levels:
    -   sections:
        -   title: Los estudiantes olvidan escribir los comandos
            example:
                error_code: "Hedy no puede imprimir esto\n"
                solution_code: "imprimir Hedy puede imprimir esto!\n"
        -   example:
                error_text: "Los comandos no funcionarán si están en mayúsculas.\n"
                solution_text: "Quita las mayúsculas.\n"
        -   title: Alumnos utilizan echo sin ask
            example:
                error_code: "echo Tu nombre es\n"
                solution_code: "ask ¿Cuál es tu nombre?\necho Tu nombre es\n"
        -   example:
                error_text: "Y están en lo cierto! Por eso ellos aprenderán a utilizar variables adecuadas en el siguiente nivel.\n"
                solution_text: "En el nivel 1 tenemos que llegar hasta aquí:\n"
        -   title: 'Tortuga: los estudiantes hacen que la tortuga se salga de la pantalla'
            example:
                error_text: "A menudo, a los estudiantes les encanta probar números grandes cuando usan la tortuga, lo que hace que la flecha se salga de la pantalla.\n"
                solution_text: "En el ejemplo, los estudiantes tienden a pensar que el comando para girar no funciona. Aunque sí funciona, pero no pueder verlo pasando fuera de la pantalla. Utiliza números más pequeños para prevenir que esto ocurra.\n"
        -   example:
                error_text: "Retroceder no es un comando.\n"
                solution_text: "Para que la tortuga retroceda, debes uitlizar el comando adelante un número negativo. Por ejemplo:\n"
    -   level: '2'
        sections:
        -   example:
                error_text: "Hedy no puede reconocer un comando mal escrito.\n"
                solution_text: "Enseña a tus estudiantes a leer los mensajes de error. De esta forma ellos pueden encontrar por sí solos que es lo que está mal.\n"
        -   title: Los estudiantes olvidan que el comando preguntar ha cambiado
            example:
                error_code: "preguntar ¿Qué te gustaría comer?\n"
                solution_code: "ordenar es preguntar ¿Que te gustaría comer?\n"
        -   example:
                error_text: "Para algunos estudiantes, puede ser frustrante aprender que el comando echo ya no funciona. Por eso es muy importante explicar las ventajas de usar variables. ¡Por ejemplo, puedes usar múltiples variables en un código y ponerlas donde quieras en una frase!\n"
                solution_text: "En su lugar, utiliza una variable.\n"
        -   title: Los estudiantes usan el nombre de una variable o como una palabra normal
            example:
                error_code: "nombre is Hedy\nprint Hola mi nombre es nombre\n"
                solution_code: "nombre is Hedy\nprint Hola soy nombre\n"
        -   example:
                error_text: "Las variables deben nombrarse con una sola palabra. Puedes usar un guion bajo (_) para conectar dos palabras. Eso cuenta como una.\n"
                solution_text: "Añade un guion bajo.\n"
        -   title: Es posible que los estudiantes usen dos nombres diferentes para la misma variable
            example:
                error_code: "caballo is ask ¿Cómo se llama tu caballo?\nprint Tu caballo se llama nombre\n"
                solution_code: "nombre is ask ¿Cómo se llama tu caballo?\nprint Tu caballo se llama nombre\n"
    -   sections:
        -   title: Los estudiantes intentan imprimir listas enteras
            example:
                error_code: "productos is apples, milk, chocolate\nprint productos\n"
                solution_code: "print apples, milk, chocolate\n\nor\n\ngroceries is apples, milk, chocolate\nprint groceries at random\n"
        -   example:
                error_text: "This problem probably occured in level 2 as well. Now it can happen with lists too.\n"
                solution_text: "Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.\n"
        -   title: Students forget at in at random
            example:
                error_code: "birds is sparrow, seagull, robin\nprint birds random\n"
                solution_code: "birds is sparrow, seagull, robin\nprint birds at random\n"
        -   example:
                error_text: "Or they will sometimes put at random at the beginning of the line.\n"
                solution_text: "Emphasize to your students that you always need a print to print text.\n"
        -   title: Students forget to use commas in their lists
            example:
                error_code: "pizzas is funghi tonno quattro stagioni\nprint pizzas at random\n"
                solution_code: "pizzas is funghi, tonno, quattro stagioni\nprint pizzas at random\n"
        -   example:
                solution_text: "Hedy can't print anything at random, because there is no list to choose from.\n"
                error_text: "For example\n"
        -   title: 'Students try to use add/remove without a list '
            example:
                solution_text: "There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.\n"
                error_code: "names is Jake\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
        -   example:
                error_text: "Without to/from the add/remove command won't work.\n"
                solution_text: "Hedy has to know which list the item should be added to/removed from.\n"
    -   sections:
        -   example:
                error_code: "print Hello\nmood is ask 'How are you?\n"
                error_text: "In this level print and ask need a set of quotation marks. One before of the text and one after.\n"
            title: Students forget to use quotation marks on both sides of the text
        -   example:
                error_text: "It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the \"double quotes\" or the `skewed one`.\n"
                solution_text: "These are the correct quotation marks:\n"
        -   title: Students use an apostrophe in their text
            example:
                error_code: "print 'You're not allowed to type this'\n"
                solution_code: "print 'Youre allowed to type this'\nprint 'And you`re able to do this'\n"
    -   level: '5'
        sections:
        -   example:
                error_text: "After students use if or else they forget to use a second command like print or ask.\n"
                solution_text: "Add the print command to fix it.\n"
        -   title: Students might use two different names for the same variable
            example:
                error_code: "horse is ask 'What is your horse called?'\nif name is Bonfire print 'cool'\nelse print 'less cool!'\n"
                solution_code: "horse is ask 'What is your horse called'\nif horse is Bonfire print 'cool!'\nelse print 'less cool!'\n"
        -   example:
                error_text: "If commandos can get very long and students tend to forget to use quotes.\n"
                solution_text: "Always use 2 quotes in a print command.\n"
        -   example:
                error_code: "if 'name' is 'Hedy' print 'fun'\nelse print 'meh!'\n"
                error_text: "In this level there are no quotes around variable names.\n"
            title: Los estudiantes usan comillas alredeor de los nombres de las variables
        -   example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                solution_text: "Add an underscore.\n"
        -   title: Students want multiple answers to be correct
            example:
                error_code: "if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'\n"
                solution_code: "friends is Jesse, David, Souf\nname is ask 'Who are you?'\nif name in friends print 'You are funny'\nelse print 'You are not funny'\n\nor\n\nname is ask 'Who are you?'\nif naam is Jesse print 'You are funny'\nif naam is David print 'You are funny'\nif naam is Souf print 'You are funny'\n"
        -   example:
                error_text: "In the example below the password is 'password'. This will result in it always being correct.\n"
                solution_text: "Pick a different name for your variable.\n"
    -   level: '6'
        sections:
        -   example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                solution_text: "In this code the output screen will print '10'.\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
    -   sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   example:
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
        -   title: Students make programs that take too long to run
            example:
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
    -   sections:
        -   example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                solution_text: "This is the correct code:\n"
        -   example:
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
            title: Students only repeat 1 line when they wanted to repeat multiple lines
        -   example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                solution_text: "This is the correct code for this level:\n"
        -   title: Students make programs that take too long to run
            example:
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
        level: '8'
    -   sections:
        -   example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
        level: '9'
    -   sections:
        -   title: Students so not use the for command correctly
            example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                solution_text: "You should use indentation after a for command.\n"
    -   level: '11'
        sections:
        -   example:
                solution_text: "This is the correct code:\n"
                error_code: "for i in range 1 to 5\nprint i\n"
        -   title: Students don't understand the i
            example:
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   title: Students forget quotation marks
            example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_code: "print 2,5 + 2,5\n"
                solution_code: "print 2.5 + 2.5\n"
    -   sections:
        -   example:
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
        level: '13'
    -   sections:
        -   title: Students confuse the < and > signs
            example:
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget to use the == sign
            example:
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   sections:
        -   title: Students forget indentation in the while loop
            example:
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   sections:
        -   title: Students forget the brackets
            example:
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
    -   sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   example:
                error_text: "After each command that requires indentation, a colon should be used.\n"
                solution_text: "This is the correct code:\n"
    -   sections:
        -   title: Students forget to use the brackets
            example:
                error_code: "print 'my name is Hedy!'\n"
                solution_code: "print('my name is Hedy!')\n"
        -   example:
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   title: Students might use the brackets as quotation marks
            example:
                solution_text: "This is the correct code:\n"
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
    title: Errores frecuentes
    key: errores_comunes
title: Documentación de Hedy
learn-more-sections:
-   title: "¿Te gusta Hedy?"
    text: |
        ¡Nos encantaría saber más de ti!
        [Haz click aquí para escribirnos un mensaje](mailto:hello@hedy.org "Enviar correo electrónico")
-   title: "¿Encontró un error?"
    text: |
        [Transmítelo a través de GitHub](https://github.com/hedyorg/hedy/issues/new/choose)
-   title: "Charla en la semana de la programación"
    text: |
        Want to know more about Hedy? Check out this talk Felienne gave at the European Code Week 2020:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
start-sections:
-   title: "¿Qué es un lenguaje de programación gradual?"
    text: |
        Aprender a programar puede resultar difícil. En sí misma, la programación no *es* difícil, pero entraña muchas reglas que necesitas memorizar, como cuando empezaste a aprender tu idioma.
        Del mismo modo, se requiere muchísima práctica para aprender a programar bien.

        Tú puedes leer estas líneas con facilidad. Pero, ¿recuerdas cuando estabas aprendiendo a leer? Seguro que entonces te tomaste un tiempo para cada una de las letras del abecedario.
        Eso también vale para la programación: puede ser difícil al principio, ¡pero será pan comido después!

        Lo bueno de Hedy es que es un lenguale *gradual*. Esto significa que no es necesario aprender todas las reglas a la vez.
        En los primeros niveles no se presentan tantas reglas, por lo que puedes acostumbrarte a la programación sin batallar mucho.
        En cada nivel iremos agregando nuevas reglas, aumentando el número de comandos que debes conocer. Los comandos son las instrucciones que le damos a la computadora.
-   title: "¿Por qué Hedy es gradual?"
    text: |
        En en el siguiente vídeo, Felienne, la creadora de Hedy, nos explica por qué Hedy es gradual.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "¿A quién se destina Hedy?"
    text: |
        ¡Hedy está pensado para todos los niños que quieran aprender a programar! Aunque se recomienda que sepan leer inglés con facilidad.
-   title: "¿Se necesita tener experiencia como programador?"
    text: |
        No, no es indispensable. Sin embargo, si ya han programado en Scratch o Python, algunas sentencias les resultarán familiares.
-   title: "¿Hedy es software libre?"
    text: |
        ¡Sí! Hedy también es 'Open source', lo que significa que todas las personas que sepan programar podrían ayudarnos a mejorarlo.
        Encontrarás el código en [GitHub](https://github.com/hedyorg/hedy).
        Si te gusta Hedy y quieres contribuir con una donación, aceptamos (y nos encantaría) [donación](https://github.com/sponsors/hedyorg?locale=en)!
-   title: "¿Debo instalar algo?"
    text: |-
        No. Hedy marcha muy bien en tu navegador, es decir, en el mismo programa que estás utilizando para ver esta página. Probablemente Chrome, Edge o Firefox. Además, Hedy puede funcionar en tu teléfono celular o en tu tableta.
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Ayuda a los profesores a empezar
    text: "Hedy está diseñado para ayudar a los profesores enseñar programación en el salón de clases. Tenemos funciones específicas para profesores como crear una clase, personalizarla y ver el progreso de los estudiantes.\nSi te gusta Hedy, puedes contactar a las escuelas que conoces para ayudar a los profesores! Nosotros podemos ayudar en la búsqueda de escuelas o profesores via [Discord](https://discord.gg/8yY7dEme9r).\n"
