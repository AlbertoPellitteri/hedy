sections:
-   subsections:
    -   text: "Hedy là một ngôn ngữ lập trình dạng văn bản, được phát triển đặc biệt dành cho thiếu niên (10 đến 15 tuổi).\nTrái ngược với các ngôn ngữ lập trình dành cho trẻ em như Scratch, Hedy không sử dụng các khối lệnh mà sử dụng mã văn bản.\nVì vậy, với Hedy, bạn sẽ học cách viết mã như các lập trình viên thực thụ, nhưng theo từng bước nhỏ với các bài tập vui nhộn.\nBằng cách này, Hedy có thể là bước đệm cho các ngôn ngữ lập trình thực sự như Python theo cách dễ tiếp cận và thú vị nhất!\nBạn có thể xem [video tại đây](https://www.youtube.com/watch?v=fmF7HpU_-9k) về sự phát triển của ngôn ngữ lập trình Hedy.\n"
        title: Hedy là gì?
    -   text: "Hedy được phát triển dành cho học sinh trung học cơ sở (10 - 15 tuổi).\nKhả năng đọc hiểu của học sinh rất quan trọng, vì vậy chúng tôi khuyên bạn không nên bắt đầu với Hedy trước khi học sinh đạt được ít nhất trình độ đọc lớp 3.\nHọc sinh (và giáo viên!) không cần bất kỳ kinh nghiệm lập trình nào trước khi bắt đầu với Hedy.\n"
        title: Đối tượng mục tiêu
    -   title: Hedy hoạt động như thế nào?
        text: "Hedy được chia thành các cấp độ, mỗi cấp độ lại là một bài học về những câu lệnh mới, với nhiều cuộc phiêu lưu để học sinh thực hành các lệnh mới học được.\nVới vai trò giáo viên, bạn được quyền quyết định học sinh của bạn sẽ có thể thực hành với những chủ đề nào. Ví dụ: Trong cấp độ này, học sinh của bạn sẽ tạo ra một nhà hàng, một máy tính, hay một ngôi nhà ma ám?\nTrong mỗi cấp độ, những cuộc phiêu lưu được sắp xếp từ dễ đến khó. Vì vậy, học sinh của bạn liên tục được thử thách. Học sinh của bạn có thể tự mình thực hành với các cuộc phiêu lưu, hoặc bạn có thể dùng chúng để trong những bài hướng dẫn thông thường.\n\nThe adventures also include a code example, to make sure the less digitally informed teachers are able to use Hedy too!\nOf course Hedy also caters to the creative teachers that love to make their own lessonplans and adventures!\n\nAfter programming all the adventures of a certain level, your students can test their knowledge in the quiz.\nYou can track your students' work and their progress on the class page.\n"
    -   title: Thiết bị
        text: "Hedy là một ứng dụng web, nghĩa là nó có thể chạy trên mọi thiết bị có trình duyệt web (ví dụ như Google Chrome, Firefox, Edge...). Vì vậy, các loại máy tính, máy tính bảng, hay thậm chí là điện thoại thông minh đều phù hợp để sử dụng Hedy.\nKhông cần tải xuống thứ gì trước để có thể làm việc với Hedy, chỉ cần truy cập website là bạn đã có thể sẵn sàng!\n"
    -   title: Cộng đồng Hedy
        text: "Mọi giáo viên, lập trình viên hay người hâm mộ Hedy đều được chào đón tại [máy chủ Discord của chúng tôi](https://discord.gg/8yY7dEme9r). Đây là nơi lý tưởng để trò chuyện về Hedy: chúng tôi có các kênh để bạn có thể chia sẻ những dự án và bài học thú vị, để có thể báo cáo về lỗi phát sinh, và để nói chuyện cùng với những giáo viên khác và đội ngũ Hedy.\n"
    key: giới thiệu
    title: Giới thiệu
-   title: Chuẩn bị
    subsections:
    -   title: Tạo một lớp học
        text: "Là giáo viên, bạn có thể tạo lớp học cho học sinh của mình. Trong lớp học này, bạn có thể xem tài khoản của học sinh, xem những chương trình học sinh viết và giám sát quá trình học tập.\nBạn cũng có thể tùy chỉnh lớp học và chọn lựa sự xuất hiệt những cuộc phiêu lưu nhất định. Bằng cách này, học sinh của bạn sẽ không bị choáng ngợp bởi số lượng cấp độ và những cuộc phiêu lưu, và họ có thể tập trung vào những cuộc phiêu lưu mà bạn muốn họ luyện tập với.\n"
    -   text: "Có hai cách để học sinh tham gia lớp học của bạn. Học sinh của bạn có thể tự tạo tài khoản, hoặc bạn có thể tạo tài khoản cho học sinh của mình.\n\n**Học sinh tự tạo tài khoản**\nCũng như giáo viên, học sinh có thể truy cập website của Hedy và tạo tài khoản cho bản thân. Quá trình vào lớp rất đơn giản, học sinh chỉ cần truy cập đường dẫn lời mời.\nBạn có thể thấy link mời trên trang lớp học, và có thể gửi nó đến học sinh của mình. Để quá trình diễn ra thuận lợi, hãy nhớ rằng học sinh cần đăng nhập vào Hedy khi họ truy cập link.\n\n**Giáo viên tạo tài khoản cho học sinh**\nĐôi khi, việc tự tạo một loạt tài khoản cho học sinh của bạn sẽ dễ dàng hơn. Điều này có thể được thực hiện bằng cách nhấp vào nút 'tạo tài khoản học sinh' và điền tên người dùng và mật khẩu cho họ.\nCác học sinh có thể đăng nhập với tên người dùng và mật khẩu mà bạn đã chọn. Sau đó, họ có thể thay đổi tên người dùng hoặc mật khẩu nếu muốn và họ sẽ vẫn ở trong lớp học của bạn.\n"
    -   text: "Học sinh khi tạo hồ sơ sẽ phải chọn \"ngôn ngữ ưu tiên\" mà họ muốn. Hedy sẽ luôn hiển thị bằng ngôn ngữ đã chọn.\nViệc thay đổi ngônn gữ có thể được thực hiện sau, bằng cách vào mục \"Tài khoản của tôi\" và \"Cài đặt cá nhân của tôi\" một lần nữa.\nKể từ tháng 12 năm 2021, việc thiết lập ngôn ngữ ưu tiên là bắt buộc cho mọi tài khoản Hedy.\nVới những tài khoản được tạo ra trước thời gian này, chủ tài khoản sẽ nhận được thông báo về việc thiếu ngôn ngữ ưu tiên.\nĐừng lo lắng, chỉ cần vào mục \"Hồ sơ của tôi\" và chọn một ngôn ngữ thôi!\nCho đến khi bạn chọn một ngôn ngữ, Hedy sẽ được hiển thị bằng ngôn ngữ của trình duyệt web bạn dùng (Hedy sẽ hiển thị bằng tiếng Anh nếu ngôn ngữ ấy chưa được hỗ trợ).\n\n**Dành cho những người không nói tiếng Anh**\nBạn không những có thể thay đổi ngôn ngữ của cuộc phiêu lưu sang ngôn ngữ của riêng mình, mà bạn cũng có thể chọn ngôn ngữ của từ khóa (ví dụ: \"in\" hoặc \"hỏi\").\nBằng cách này, bạn có thể dạy học sinh của mình lập trình bằng các từ khóa tiếng Anh, nhưng bạn cũng có thể để họ lập trình theo ngôn ngữ của riêng họ. Ví dụ, học sinh Việt Nam có thể sử dụng lệnh \"hỏi\" thay vì \"in\".\n\nGhi chú: Đến thời điểm này, bản dịch từ khóa Hedy tiếng Việt chưa được cập nhật và thống nhất đầy đủ. Trong trường hợp có vấn đề, bạn nên tạm thời sử dụng tiếng Anh.\n"
    -   text: "Vì bạn đã đăng nhập, bạn sẽ thấy biểu ngữ màu xanh dương có \"Hồ sơ của tôi\" và \"Chương trình của tôi\".\nTài khoản học sinh của bạn cũng có những tab này. Trong mục \"Chương trình của tôi\", bạn có thể truy cập vào tất cả chương trình bạn đã lưu.\n\nBạn có thể lưu các dự án một cách dễ dàng, bằng cách đặt tên cho chúng trong thanh màu trắng và nhấn nút \"Lưu chương trình\" màu xanh lá cây.\nBạn và học sinh có thể chia sẻ chương trình với nhau. Các chương trình này sẽ được đăng tải trên trang \"Khám phá\" của chúng tôi để mọi người cùng thấy và sử dụng.\nNếu bạn muốn hủy chia sẻ chương trình, chuyển đến \"Chương trình của tôi\" và nhấn nút \"Không chia sẻ\".\n"
    key: chuẩn bị
-   subsections:
    -   title: Giảng dạy với Hedy
        text: "Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.\nThis gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.\nWe use this structure in our lessons:\n"
    -   title: Giới thiệu
        text: "You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?\nThis way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.\n"
    -   title: Introduction of new concepts and commands
        text: "The new concepts and commands can be very hard for some students to fully understand.\nThat's why it's of importance to model the proper use of the new commands to your students.\nEspecially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.\nShowing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').\n"
    -   title: Let's get to work
        text: "Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.\nThe following tabs are adventures that the students can try out and make their own.\nThe adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.\nThe last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.\nThey don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.\nThe example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.\nStimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.\n"
    -   title: Quiz
        text: "To test whether your students have picked up all the new info in the level, you can let them make the quiz.\nThe quiz contains 10 multiple choice questions about the new concepts and command to that level.\nNot every level has a quiz yet, as we are still building the quizzes.\n"
    -   text: "Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?\nHow did they learn from their mistakes? And of course: What did they create?\nStudents are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.\n"
    title: Giảng dạy với Hedy
    key: giảng dạy
-   levels:
    -   sections:
        -   example:
                error_text: "For example they type a sentence without using print.\n"
                solution_text: "Teach your students to always start a line of code with a command.\n"
        -   example:
                solution_text: "Remove the capitals.\n"
                error_text: "Commands won't work if they are in capitals.\n"
            title: Students use capitals when typing commands
        -   example:
                error_text: "Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.\n"
                solution_text: "Add an ask command to make it work.\n"
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_code: "ask Which programming language is the most fun?\necho is the best!\n"
                solution_code: "ask Which programming language is the most fun?\necho The best is...\n"
        -   example:
                error_code: "forward 300\nturn 90\n"
                solution_code: "forward 100\nturn 90\n"
        -   title: "Turtle: Students use the command backward, but that doesn't exist"
            example:
                error_code: "backward 100\n"
                solution_code: "forward -100\n"
    -   sections:
        -   example:
                solution_code: "print Don't make typos!\n"
                solution_text: "Teach your students to read the error messages. This way they can find out themselves what went wrong.\n"
            title: Students make typos in their commands
        -   example:
                solution_text: "In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.\n"
                solution_code: "order is ask What would you like to eat?\n"
        -   title: 'Students try to use the echo command '
            example:
                solution_text: "Use a varible instead.\n"
                error_code: "answer is ask Why doesn't echo work anymore?!\necho\n"
        -   example:
                error_text: "In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.\n"
                solution_text: "So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.\n"
        -   example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                solution_text: "Add an underscore.\n"
            title: Students use long variable names containing two words.
        -   example:
                solution_code: "name is ask What is your horse called?\nprint Your horse is called name\n"
                error_code: "horse is ask What is your horse called?\nprint Your horse is called name\n"
        level: '2'
    -   sections:
        -   example:
                solution_code: "print apples, milk, chocolate\n\nor\n\ngroceries is apples, milk, chocolate\nprint groceries at random\n"
                error_code: "groceries is apples, milk, chocolate\nprint groceries\n"
        -   title: Students use the name of a variable or list as regular text
            example:
                error_code: "name is Hedy\nprint Hi my name is name\n\nor\n\nanimal is rhino, bee, swan\nprint The best animal is... animal at random\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n\nor\n\nanimals is rhino, bee, swan\nprint The best animal is... animals at random\n"
        -   example:
                error_text: "Like in the example\n"
                solution_text: "This problem is solved by adding the word at.\n"
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_code: "fruit is apple, cherry, banana\nfruit at random\n"
                solution_code: "fruit is apple, cherry, banana\nprint fruit at random\n"
        -   example:
                error_text: "In a list items are seperated with a comma.\n"
                solution_text: "After each item on your list, there should be a comma\n"
        -   title: Students try to use at random without a list
            example:
                solution_text: "Hedy can't print anything at random, because there is no list to choose from.\n"
                error_text: "For example\n"
        -   example:
                error_text: "In the example below 'names' is not a list, but a variable. You cannot add anything to it.\n"
                solution_text: "There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.\n"
        -   title: Students forget to use to/from in add/remove
            example:
                error_code: "adventures is story, parrot, dice\nchoice is Which adventure do you like best?\nadd choice\nremove dice\nprint I love adventures at random\n"
                solution_code: "adventures is story, parrot, dice\nchoice is Which adventure do you like best?\nadd choice to adventures\nremove dice from adventures\nprint I love adventures at random\n"
    -   sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_code: "print Hello\nmood is ask 'How are you?\n"
                solution_code: "print 'Hello'\nmood is ask 'How are you?'\n"
        -   example:
                error_text: "It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the \"double quotes\" or the skewed one `.\n"
                solution_text: "These are the correct quotation marks:\n"
        -   example:
                error_text: "From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.\n"
                solution_text: "You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.\n"
            title: Students use an apostrophe in their text
    -   level: '5'
        sections:
        -   example:
                error_text: "After students use if or else they forget to use a second command like print or ask.\n"
                solution_code: "if name is Hedy print 'Great!'\nelse print 'Hedy is better!'\n"
        -   title: Students might use two different names for the same variable
            example:
                error_code: "horse is ask 'What is your horse called?'\nif name is Bonfire print 'cool'\nelse print 'less cool!'\n"
                solution_code: "horse is ask 'What is your horse called'\nif horse is Bonfire print 'cool!'\nelse print 'less cool!'\n"
        -   example:
                error_text: "Codes using the `if` commando can get very long and students tend to forget to use quotes.\n"
                solution_text: "Always use 2 quotes in a print command.\n"
        -   title: Students use quotes around variable names
            example:
                solution_text: "Remove the quotes to get the code to work.\n"
                error_code: "if 'name' is 'Hedy' print 'fun'\nelse print 'meh!'\n"
        -   example:
                error_code: "chosen door is ask 'Which door do you pick?'\n"
                solution_code: "chosen_door is ask 'which door do you pick?'\n"
        -   title: Students want multiple answers to be correct
            example:
                error_code: "if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'\n"
                solution_code: "friends is Jesse, David, Souf\nname is ask 'Who are you?'\nif name in friends print 'You are funny'\nelse print 'You are not funny'\n\nor\n\nname is ask 'Who are you?'\nif naam is Jesse print 'You are funny'\nif naam is David print 'You are funny'\nif naam is Souf print 'You are funny'\n"
        -   example:
                solution_text: "Pick a different name for your variable.\n"
                error_code: "password is ask 'What is the password?'\nif password is password print 'Access granted'\nelse print 'Acces denied!'\n"
    -   level: '6'
        sections:
        -   example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                solution_text: "In this code the output screen will print '10'.\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
    -   sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_code: "repeat 3 times 'For he`s a jolly good fellow'\nrepeat 3 print 'Which nobody can deny!'\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   example:
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
        -   example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                solution_text: "Make sure the codes aren't too long\n"
            title: Students make programs that take too long to run
    -   sections:
        -   title: Students use the indentation wrong
            example:
                error_code: "repeat 3 times\nprint 'hello'\n"
                solution_code: "repeat 3 times\n    print 'hello'\n"
        -   example:
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
        -   example:
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
    -   sections:
        -   title: Students so not use the for command correctly
            example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                solution_text: "You should use indentation after a for command.\n"
    -   level: '11'
        sections:
        -   example:
                error_text: "Make sure that the students use indentation.\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   title: Students don't understand the i
            example:
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   title: Students forget quotation marks
            example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                solution_text: "This is the correct code:\n"
            title: Students use commas instead of periods in decimal numbers
    -   sections:
        -   title: Students confuse `and` with `or`
            example:
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   sections:
        -   title: Students confuse the < and > signs
            example:
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget to use the == sign
            example:
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   sections:
        -   example:
                solution_text: "This is the correct code:\n"
                error_text: "Indentation is often hard for students.\n"
            title: Students forget indentation in the while loop
    -   sections:
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use the wrong brackets
            example:
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students still use the old at random command
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
        level: '16'
    -   sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   example:
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
    -   sections:
        -   title: Students forget to use the brackets
            example:
                error_code: "print 'my name is Hedy!'\n"
                solution_code: "print('my name is Hedy!')\n"
        -   example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students might use the brackets as quotation marks
            example:
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
    title: Frequently made mistakes
    key: common_mistakes
learn-more-sections:
-   title: Do you like Hedy?
    text: "We love to hear from you!\n[Click here to send us a message](mailto:hello@hedy.org \"About Hedy\")\n"
-   title: Found a bug?
    text: "[Let us know on GitHub](https://github.com/hedyorg/hedy/issues/new/choose)\n"
-   title: Code week talk
    text: "Nếu bạn muốn biết thêm về Hedy, hãy xem bài thuyết trình của Felienne tại Tuần lễ lập trình Châu Âu 2020 (European Code Week 2020):\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n"
join-sections:
-   title: Supporting Hedy
    text: "# There are three ways in which you can support Hedy!\n"
-   text: "Bản chất \"từng bước\" và đa ngôn ngữ của Hedy tạo ra nhiều thách thức kỹ thuật hấp dẫn.\nBạn có thể tìm hiểu những vấn đề đó trên [Github] (https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
    title: Cải thiện ngôn ngữ
-   title: Biên dịch Hedy
    text: "Bạn không phải lập trình viên sao? Không vấn đề gì! Bạn vẫn có thể ủng hộ Hedy bằng cách [biên dịch những từ khóa, thông báo lỗi, cuộc phiêu lưu và những nội dung khác](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nĐây là trạng thái hiện thời, hãy giúp chúng tôi hoàn thiện những ngôn ngữ sẵn có hoặc thêm mới một ngôn ngữ!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Hỗ trợ giáo viên bắt đầu
    text: "Hedy được thiết kể để hỗ trợ giáo viên cung cấp các bài học lập trình trên lớp. Chúng tôi có các tính năng dành riêng cho giáo viên như tùy chọn tạo lớp học, tùy chỉnh lớp học và quan sát quá trình học tập của học sinh.\nNếu bạn thích Hedy, bạn có thể liên hệ với những trường học bạn biết để có thể giúp giáo viên ở đó bắt đầu! Chúng tôi có thể giúp bạn tìm trường hoặc giáo viên thông qua [Discord](https://discord.gg/8yY7dEme9r).\n"
title: Tài liệu Hedy
start-sections:
-   title: "Textual programming made easy!"
    text: |
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Step by step learning"
    text: |
        Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven way to learn!
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Programming in context"
    text: |
        Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to create games or apps with buttons and keyboard actions.
-   title: "Is Hedy free?"
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!

-   title: "Do I need to install anything?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: "Do I need programming experience to teach with Hedy?"
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.
