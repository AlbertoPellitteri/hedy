title: "Hedy dokumentation"
sections:
-   title: "Einführung zu Hedy"
    key: "intro"
    subsections:
    -   title: "Was ist Hedy?"
        text: |
            Hedy ist eine textuelle Programmiersprache, die speziell für (Pre-)Teens (10 bis 15 Jahre alt) entwickelt wurde.
            Im Gegensatz zu Programmiersprachen für Kinder, wie Scratch, verwendet Hedy keine Codeblöcke, sondern textuellen Code.
            Mit Hedy lernt man also, Code zu tippen, wie es echte Programmierer tun, aber in kleinen Schritten mit spielerischen Übungen.
            Auf diese Weise kann Hedy als Sprungbrett zu echten Programmiersprachen wie Python dienen, und das auf eine zugängliche und vor allem spaßige Weise!
            Hier können Sie sich ein [Video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) über die Entwicklung von Hedy als Programmiersprache ansehen.
    -   title: "Zielgruppe"
        text: |
            Hedy wurde für Schüler der Unter- und Mittelstufe entwickelt (10 – 15 Jahre).
            Es ist wichtig, dass die Schüler gut lesen können. Wir empfehlen, erst mit Hedy anzufangen, wenn die Schüler mindestens das Leseniveau der 3. Klasse erreicht haben.
            Schüler (und Lehrer!) brauchen keine Programmiererfahrung, bevor sie mit Hedy beginnen.
    -   title: "Wie funktioniert Hedy?"
        text: |
            Hedy ist in Level unterteilt, in denen neue Befehle gelehrt werden. Jede Stufe enthält eine Vielzahl von Abenteuern, in denen die neu erlernten Befehle geübt werden können.
            Als Lehrer können Sie entscheiden, welche Abenteuer für Ihre Schüler zur Verfügung stehen. Werden sie in diesem Level ein Restaurant, eine Rechenmaschine oder ein Spukhaus bauen? Innerhalb jedes Levels sind die Abenteuer vom einfachsten zum schwierigsten geordnet.
            So werden Ihre Schüler immer wieder neu herausgefordert. Die Abenteuer können von den Schülern einzeln gelöst werden, oder Sie können sie in einem klassischen Unterricht einsetzen.

            Zu den Abenteuern gehört auch ein Code-Beispiel, damit auch weniger digital informierte Lehrer Hedy nutzen können!
            Natürlich ist Hedy auch für die kreativen Lehrer gedacht, die gerne ihre eigenen Unterrichtspläne und Abenteuer erstellen!

            Nachdem Sie alle Abenteuer eines bestimmten Levels programmiert haben, können Ihre Schüler ihr Wissen in einem Quiz testen.
            Sie können die Arbeit und den Fortschritt Ihrer Schüler auf der Klassenseite verfolgen.
    -   title: "Geräte"
        text: |
            Hedy ist webbasiert, d.h. es funktioniert auf jedem Gerät mit einem Browser (Chrome, Firefox, Edge usw.), so dass Laptops, ChromeBuhks, Tablets und sogar Smartphones geeignet sind, um Hedy zu verwenden.
            Du musst nichts herunterladen, bevor du mit Hedy arbeitest, geh’ einfach auf die Website und schon kannst du loslegen!
    -   title: Die Hedy Community
        text: "Alle Hedy-Lehrpersonen, Programmierer und andere Fans sind auf unserem [Discord-Server](https://discord.gg/8yY7dEme9r) willkommen. Dies ist der ideale Ort, um sich über Hedy auszutauschen: wir haben Channel, wo du deine coolen Projekte und Lektionen zeigen kannst, Channel um Fehler zu melden, und Channel um sich mit anderen Lehrpersonen und dem Hedy-Team zu unterhalten.\n[Hier](https://www.youtube.com/watch?v=Lyz_Lnd-_aI) findest du ein Video darüber, wie man der Discord Community beitritt.\n"
-   title: "Tutorial"
    key: "tutorial"
    subsections:
    -   title: "Tutorial"
        text: |
            Do you want to follow the tutorial (again)? Click [here](https://hedycode.com/tutorial)
-   title: "Vorbereitungen"
    key: "vorbereitungen"
    subsections:
    -   title: "Klasse Anlegen"
        text: |
            Als Lehrer oder Lehrerin kannst du eine Klasse für deine Schülerinnen und Schüler erstellen. In dieser Klasse kannst du die SuS-Accounts und ihre Programme sehen und ihren Fortschritt beobachten.
            Du kannst deine Klasse modifizieren und auswählen, welche Abenteuer für sie verfügbar sind. Auf diese Weise werden deine Schülerinnen und Schüler nicht von der Anzahl der Abenteuer und Level überfordert und sie können sich speziell auf die Abenteuer konzentrieren, mit denen sie üben sollen.
    -   title: "Customize your Class"
        text: |
            You can also customize your class and choose which adventures are available for them. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            This [video](https://www.youtube.com/watch?v=qva9gXBoUwY&t=10s) shows you how to customize your class.
    -   title: Schüler-Accounts
        text: "Es gibt 2 Wege, wie deine Schülerinnen und Schüler einer Klasse beitreten: Du kannst sie ihre eigenen Accounts erstellen lassen oder für sie Accounts anlegen.\n\n**Du erstellst Accounts für deine Schülerinnen und Schüler**\nDer einfachste Weg Schülerinnen und Schüler zu deiner Klasse hinzuzufügen ist Accounts für sie anzulegen. Dies geht, indem man auf \"Erstelle SuS-Accounts\" klickt und die Nutzernamen und Passwörter für sie ausfüllt.\nDie Schülerinnen und Schüler können sich mit den Nutzernamen und Passwörtern deiner Wahl einloggen. Danach können sie beides ändern, wenn sie möchten, und bleiben trotzdem in deiner Klasse.\nDieses [Video](https://www.youtube.com/watch?v=eEQvik-Ce5M) zeigt wie du am schnellsten und einfachsten SuS zu deiner Klasse hinzufügst.\n\n**Schülerinnen und Schüler machen ihre eigenen Accounts**\nDeine Schülerinnen und Schüler gehen auf die Hedy Website und erstellen ihre eigenen Accounts, so wie du es getan hast. Um sie deiner Klasse hinzuzufügen, müssen sie nur auf den Einladungs-Link klicken.\nDu findest den Einladungs-Link auf der Klassenseite, um ihn deinen Schülerinnen und Schülern zu schicken. Beachte, dass deine Schülerinnen und Schüler eingeloggt sein müssen, wenn sie den Link anklicken, damit es reibungslos läuft.\nDu kannst eine Schülerin oder einen Schüler manuell einladen, indem du den \"Einladen mit Nutzername\"-Knopf drückst.\n"
    -   title: Bevorzugte Sprache einstellen
        text: "Wenn Schülerinnen und Schüler Konten erstellen, sollen sie eine 'bevorzugte Sprache' auswählen. Hedy wird immer in dieser Sprache geladen werden.\nDiese Sprache kann später geändert werden in dem man zu 'Mein Konto' und dann zu 'Meine persönlichen Einstellungen' navigiert.\nAb Dezember 2021 ist die Einstellung einer bevorzugten Sprache für jedes Hedy Konto obligatorisch.\nWenn dein Konto oder das Konto von Schülerinnen und Schülern früher als dieses Datum erstellt wurde, erhält das entsprechende Konto eine Nachricht, dass die bevorzugte Sprache fehlt.\nKeine Sorge! Navigiere zu 'Mein Konto' und stelle eine Sprache in den Profil-Einstellungen ein.\nBis eine Sprache eingestellt wurde, wird Hedy in der Browser Sprache angezeigt, sofern sie unterstützt wird, ansonsten auf Englisch.\n\n**Für Nicht-Englischsprachige**\nDu kannst nicht nur die Sprache der Abenteuer auf deine eigene Sprache festlegen. Auch die Schlüsselwörter (wie z.B. 'print' oder 'ask') können in der eigenen Sprache angezeigt werden.\nSo kannst du deinen Schülern programmieren mit englischen Schlüsselwörter beibringen, du kannst sie aber auch in ihrer eigenen Sprache programmieren lassen. Zum Beispiel können niederländische Schüler den Befehl 'vraag' anstatt 'ask' benutzen.\n\n**Video**\nDieses [Video](https://www.youtube.com/watch?v=QrVZETj4oLM) zeigt dir, wie man eine präferierte Sprache setzt und die Schlüsselwörter ebenfalls zur präferierten Sprache ändert.\n"
    -   title: Programme Speichern
        text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   title: "Unterricht mit Hedy"
    key: "unterricht"
    subsections:
    -   title: " "
        text: |
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
    -   title: "Slides"
        text: |
            **COMING SOON** Here you'll soon find slides to use in your lessons.
    -   title: "Introduction"
        text: |
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.
    -   title: "Einführung in neue Konzepte und Befehle"
        text: |
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').
    -   title: "Lass uns loslegen"
        text: |
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: "Quiz"
        text: |
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
            Some levels also contain puzzels. Puzzels show the students a couple of line of code that the students have to put in the right order.

            This [video](https://www.youtube.com/watch?v=lNh5EdZVUwc) shows the quizzes and puzzels.
    -   title: "Auswertung"
        text: |
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: "Extra Hedy-Features"
    key: "Features"
    subsections:
    -   title: "Lehrstatistiken"
        text: |
            Dieses [Video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) zeigt dir mehr Infos, wie man die Lehrstatistiken in deiner Klasse benutzt.
    -   title: "Erstelle dein eigenes Abenteuer"
        text: |
            Für Lehrpersonen ist es auch möglich eigene Abenteuer zu erstellen. [Dieses Video](https://www.youtube.com/watch?v=A0zbXpxX4q4) zeigt dir, wie du dein eigenes Abenteuer erstellst und es zu deinen Klassen hinzufügst.
    -   title: "Seite entdecken"
        text: |
            On the [explore](https://hedycode.com/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: "Meine Errungenschaften"
        text: |
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedycode.com/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: "Highscores"
        text: |
            Auf [dieser Seite](https://hedycode.com/highscores) kannst du die Highscores aller Hedy-Nutzer sehen.
            In diesem [Video](https://www.youtube.com/watch?v=IqTiUkBVTo8) kannst du mehr über Highscores erfahren.
    -   title: "Debugger"
        text: |
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: "Vorlesen"
        text: |
            Möchtest du die Ausgabe deines Programms vorlesen lassen? Dann kannst du die Vorlesen-Funktion nutzen, die du unter dem "Ausführen"-Knopf auf dem Code-Bereich findest.
    -   title: "Programmiermodus"
        text: |
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: "Andere nützliche Features"
        text: |
            Dieses [Video](https://www.youtube.com/watch?v=c4MntPPgl1Y) zeigt dir noch mehr Features von Hedy, wie die Cheatsheets und den Schlüsselwortumschalter.
-   title: "Oft gemachte Fehler"
    key: "häufige_fehler"
    intro: |
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "Schüler vergessen Befehle einzugeben"
            example:
                error_text: |
                    Beispielsweise schreiben sie einen Satz ohne den print Befehl.
                error_code: |
                    Hedy kann das nicht ausgeben
                solution_text: |
                    Lehre deinen Schülern eine Zeile immer mit einem Befehl zu starten.
                solution_code: |
                    drucke Hedy kann dies drucken!
        -   title: "Schüler schreiben Befehle in Großbuchstaben"
            example:
                error_text: |
                    Befehle funktionieren nicht mit Großbuchstaben.
                error_code: |
                    Frage warum schlägt mein Code fehl? 
                    Print Weil Ich Großbuchstaben benutze.
                solution_text: |
                    Entferne die Großbuchstaben.
                solution_code: |
                    frage Warum funktioniert mein Code jetzt?
                    drucke Weil ich die Großbuchstaben entfernt habe!
        -   title: "Schülerinnen und Schüler benutzen echo ohne frage"
            example:
                error_text: |
                    Echo ist gemacht um Antworten wiederzugeben nachdem man sie mit dem frage-Befehl eingelesen hat. Ohne frage würde echo nichts tun.
                error_code: |
                    echo Dein Name ist
                solution_text: |
                    Füge einen frage-Befehl hinzu, um es zum Laufen zu bringen.
                solution_code: |
                    frage Was ist dein Name?
                    echo Dein Name ist
        -   title: "Schülerinnen und Schüler möchten ihr echo Wort (Variable) in der Mitte eines Satzes"
            example:
                error_text: |
                    Und sie haben Recht! Deshalb werden sie im nächsten Level lernen echte Variablen zu benutzen.
                error_code: |
                    frage Welche Programmiersprache macht am meisten Spaß?
                    echo ist die Beste!
                solution_text: |
                    In Level 1 müssen wir es wie folgt belassen:
                solution_code: |
                    frage Welche Programmiersprache macht am meisten Spaß?
                    echo Die Beste ist...
        -   title: "Schildkröte: Schülerinnen und Schüler lassen die Schildkröte vom Bildschirm runter laufen"
            example:
                error_text: |
                    Schülerinnen und Schüler probieren oft große Zahlen mit der Schildkröte aus, was dazu führt, dass der Pfeil aus der Bildfläche geht.
                error_code: |
                    vorwärts 300
                    drehe 90
                solution_text: |
                    Im Beispiel denken die Schülerinnen und Schüler, dass der drehe-Befehl nicht funktioniert. Obwohl er dennoch funktioniert, kann man es ausserhalb der Bildfläche nicht sehen. Benutze kleinere Zahlen, um zu verhindern, dass dies passiert.
                solution_code: |
                    vorwärts 100
                    drehe 90
        -   title: "Turtle: Students use the command backward, but that doens't exist"
            example:
                error_text: |
                    Rückwärts ist kein Befehl.
                error_code: |
                    rückwärts 100
                solution_text: |
                    Um die Schildkröte rückwärts gehen zu lassen, benutzt man den vorwärts-Befehl und eine negative Zahl. Zum Beispiel:
                solution_code: |
                    vorwärts -100
    -   level: '2'
        sections:
        -   title: "Schülerinnen und Schüler machen Tippfehler in ihren Befehlen"
            example:
                error_text: |
                    Hedy kann keinen Befehl mit Tippfehler erkennen.
                error_code: |
                    prinnt Mach keine Tippfehler!
                solution_text: |
                    Unterrichte deine Schülerinnen und Schüler im Lesen der Fehlermeldungen. Auf diese Weise können sie selbst herausfinden, was schiefgelaufen ist.
                solution_code: |
                    print Mach keine Tippfehler!
        -   title: "Schülerinnen und Schüler vergessen, dass sich der frage-Befehl geändert hat"
            example:
                error_text: |
                    In diesem Level lernen Schülerinnen und Schüler Variablen kennen. Der frage-Befehl braucht ebenso eine Variable, aber Schülerinnen und Schüler vergessen dies.
                error_code: |
                    frage Was möchten Sie essen?
                solution_text: |
                    In diesem Level musst du Hedy sagen, wo die Antwort gespeichert werden soll, sodass sie später benutzt werden kann. Dies nennt man eine Variable.
                solution_code: |
                    order is What would you like to eat?
        -   title: "Students try to use the echo command. "
            example:
                error_text: |
                    For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |
                    antwort ist frage Warum funktioniert echo nicht mehr?!
                    echo
                solution_text: |
                    Benutze stattdessen eine Variable.
                solution_code: |
                    antwort ist frage Warum funktioniert echo nicht mehr?!
                    drucke antwort
        -   title: "Schülerinnen und Schüler benutzen einen Variablennamen als normales Wort"
            example:
                error_text: |
                    Im Beispiel unten wird 'Name' als Variable benutzt, aber auch als normaler Text. Die Ausgabe wird 'Hi mein Hedy ist Hedy' sein.
                error_code: |
                    Name ist Hedy
                    drucke Hi mein Name ist Name
                solution_text: |
                    Benutze also keine Wörter aus dem Text als Variablennamen. In Level 4 wird dies durch Anführungszeichen gelöst.
                solution_code: |
                    name ist Hedy
                    drucke Hi ich bin name
        -   title: "Schülerinnen und Schüler benutzen lange Variablennamen, die zwei Wörter enthalten."
            example:
                error_text: |
                    Eine Variable sollte mit einem Wort benannt werden. Du kannst einen Unterstrich verwenden, um zwei Wörter zu verbinden. Dies zählt als eins.
                error_code: |
                    gewählte Tür ist frage Welche Tür wählst du?
                solution_text: |
                    Füge einen Unterstrich hinzu.
                solution_code: |
                    gewählte_tür ist frage Welche Tür wählst du?
        -   title: "Schülerinnen und Schüler könnten zwei verschiedene Namen für die gleiche Variable verwenden"
            example:
                error_text: |
                    In diesem Beispiel hat der Schüler "Pferd" und "Name" für die gleiche Variable verwendet.
                error_code: |
                    Pferd ist frage Wie heißt dein Pferd?
                    drucke Dein Pferd heißt Name
                solution_text: |
                    Prüfe immer, ob die Variable durchgehend den gleichen Namen im Code hat. Kleine Unterschiede können schwer zu erkennen sein (z.B. Plural), sie werden jedoch den Code stören.
                solution_code: |
                    Name ist frage Wie heißt dein Pferd?
                    drucke Dein Pferd heißt Name
    -   level: '3'
        sections:
        -   title: "Schülerinnen und Schüler versuchen ganze Listen zu drucken"
            example:
                error_text: |
                    Eine Liste kann nicht gedruckt werden. Du kannst nur ein Element der Liste ausgeben mit at random.
                error_code: |
                    einkäufe ist Äpfel, Milch, Schokolade
                    drucke einkäufe
                solution_text: |
                    Um eine Liste aller Einkäufe auszugeben, musst du sie nur nach einem drucke-Befehl platzieren. Sonst kannst du die Liste ausgeben, indem du at random nutzt.
                solution_code: |
                    drucke Äpfel, Milch, Schokolade

                    oder

                    einkäufe ist Äpfel, Milch, Schokolade
                    drucke einkäufe at random
        -   title: "Schüler nutzen den Namen einer Variablen oder Liste als ganz normalen Text"
            example:
                error_text: |
                    Dieses Problem ist wahrscheinlich auch in Level 2 aufgetreten. Nun kann es auch mit Listen passieren.
                error_code: |
                    Name ist Hedy
                    drucke Hi mein Name ist Name

                    oder

                    Tier ist Nashorn, Biene, Schwan
                    drucke Das beste Tier ist... Tier at random
                solution_text: |
                    Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |
                    Name ist Hedy
                    drucke Hi ich bin Name

                    oder

                    tiere ist Nashorn, Biene, Schwan
                    drucke Das beste Tier ist... tiere at random
        -   title: "Schülerinnen und Schüler vergessen at random"
            example:
                error_text: |
                    Wie im Beispiel
                error_code: |
                    vögel ist Spatz, Möwe, Rotkehlchen
                    drucke vögel random
                solution_text: |
                    Dieses Problem wird durch das Hinzufügen des Wortes at gelöst.
                solution_code: |
                    vögel ist Spatz, Möwe, Rotkehlchen
                    drucke vögel at random
        -   title: "Schüler vergessen den Ausgabebefehl zu nutzen während sie auch den zufällig-Befehl benutzen"
            example:
                error_text: |
                    Oder manchmal schreiben sie at random an den Beginn der Zeile.
                error_code: |
                    obst ist Apfel, Kirsche, Banane
                    obst at random
                solution_text: |
                    Betone ggü. deinen Schülerinnen und Schülern, dass man immer drucke braucht um Text auszugeben.
                solution_code: |
                    obst ist Apfel, Kirsche, Banane
                    drucke obst at random
        -   title: "Schülerinnen und Schüler vergessen Kommas in ihren Listen zu benutzen"
            example:
                error_text: |
                    In einer Liste werden Elemente mit einem Komma getrennt.
                error_code: |
                    pizzas ist funghi tonno quattro stagioni
                    drucke pizzas at random
                solution_text: |
                    Nach jedem Element in deiner Liste sollte ein Komma sein
                solution_code: |
                    pizzas ist funghi, tonno, quattro stagioni
                    drucke pizzas at random
        -   title: "Schüler versuchen den zufällig Befehl ohne eine Liste zu verwenden"
            example:
                error_text: |
                    Zum Beispiel
                error_code: |
                    clubs ist Manchester United
                    drucke clubs at random
                solution_text: |
                    Hedy kann nichts at random drucken, weil keine Liste existiert von der gewählt werden kann.
                solution_code: |
                    clubs ist Manchester United, Bayrn Munchen, FC Barcelona
                    drucke clubs at random
        -   title: "Schülerinnen und Schüler versuchen add/remove ohne eine Liste zu verwenden "
            example:
                error_text: |
                    Im unteren Beispiel ist "Namen" keine Liste, aber eine Variable. Du kannst nichts hinzufügen.
                error_code: |
                    Namen ist Jake
                    dein_name ist frage Wer bist du?
                    add dein_name to Namen
                    drucke Namen at random
                solution_text: |
                    Es muss zuerst eine Liste geben, daher musst du einen zweiten Namen hinzufügen, um aus Namen eine Liste zu machen, z.B. Amy. Wenn du Amy nicht in deiner Liste möchtest, kannst du sie sofort danach entfernen.
                solution_code: |
                    Namen ist Jake, Amy
                    dein_name ist frage Wer bist du?
                    füge dein_name zu Namen
                    drucke Namen at random
        -   title: "Schüler vergessen von/bis im hinzufügen/entfernen zu verwenden"
            example:
                error_text: |
                    Ohne zu/von funktionieren füge/entferne-Befehle nicht.
                error_code: |
                    Abenteuer ist Geschichte, Papagei, Würfel
                    wahl ist Welches Abenteuer gefällt dir am Besten?
                    füge wahl
                    entferne Würfel
                    drucke Ich mag Abenteuer at random
                solution_text: |
                    Hedy muss wissen zu welcher Liste ein Element hinzugefügt oder entfernt werden soll.
                solution_code: |
                    Abenteuer ist Geschichte, Papagei, Würfel
                    wahl ist Welches Abenteuer gefällt dir am Besten?
                    füge wahl zu Abenteuer
                    entferne Würfel von Abenteuer
                    drucke Ich mag Abenteuer at random
    -   level: '4'
        sections:
        -   title: "Schülerinnen und Schüler vergessen Anführungszeichen auf beiden Seiten des Textes"
            example:
                error_text: |
                    In diesem Level benötigen drucke und frage Anführungszeichen. Eines vor dem Text und eines dahinter.
                error_code: |
                    drucke Hallo
                    stimmung ist frage 'Wie geht es dir?'
                solution_text: |
                    Füge die richtigen Anführungszeichen hinzu.
                solution_code: |
                    drucke 'Hallo'
                    stimmung ist frage 'Wie geht es dir?'
        -   title: "Schülerinnen und Schüler verwenden die falschen Anführungszeichen"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the "double quotes" or the `skewed one`.
                error_code: |
                    drucke `Willkommen im Restaurant`
                    essen ist frage "Was möchten Sie bestellen?"
                solution_text: |
                    Dies sind die richtigen Anführungszeichen:
                solution_code: |
                    drucke 'Willkommen im Restaurant'
                    essen ist frage 'Was möchten Sie bestellen?'
        -   title: "Schülerinnen und Schüler verwenden ein Apostroph in ihrem Text"
            example:
                error_text: |
                    Ab diesem Level sind Apostrophe nicht erlaubt. Im Englischen werden sie oft benutzt, um Zusammenziehungen zu schreiben, wie z.B. you're, don't oder what's.
                error_code: |
                    drucke 'Hedy's Restaurant darfst du nicht tippen'
                solution_text: |
                    Du kannst die falsche Grammatik verwenden und das Apostroph einfach weglassen. Oder du kannst ` als Ersatz für das Apostroph verwenden.
                solution_code: |
                    drucke 'Hedys ist erlaubt zu tippen'
                    drucke 'Und Hedy`s ist erlaubt'
    -   level: '5'
        sections:
        -   title: "Schülerinnen und Schüler vergessen drucke innerhalb eines falls-Befehls zu verwenden"
            example:
                error_text: |
                    Schülerinnen und Schüler vergessen nach einem falls oder sonst einen zweiten Befehl wie drucke oder frage zu verwenden.
                error_code: |
                    falls name ist Hedy 'Großartig!'
                    sonst 'Hedy ist besser!'
                solution_text: |
                    Füge den drucke-Befehl hinzu, um es zu reparieren.
                solution_code: |
                    falls name ist Hedy drucke 'Großartig!'
                    sonst drucke 'Hedy ist besser!'
        -   title: "Schülerinnen und Schüler könnten zwei verschiedene Namen für die gleiche Variable verwenden"
            example:
                error_text: |
                    In diesem Beispiel hat der Schüler oder die Schülerin 'Pferd' und 'Name' für die gleiche Variables benutzt.
                error_code: |
                    Pferd ist frage 'Wie heißt dein Pferd?'
                    falls Name ist Bonfire drucke 'cool'
                    sonst drucke 'weniger cool!'
                solution_text: |
                    Prüfe immer, ob die Variable durchgehend den gleichen Namen im Code hat. Kleine Unterschiede können schwer zu erkennen sein (z.B. Plural), sie werden jedoch den Code stören.
                solution_code: |
                    Pferd ist frage 'Wie heißt dein Pferd?'
                    falls Pferd ist Bonfire drucke 'cool'
                    sonst drucke 'weniger cool!'
        -   title: "Schüler vergessen immer noch die Anführungszeichen auf beiden Seiten"
            example:
                error_text: |
                    If commandos can get very long and students tend to forget to use quotes.
                error_code: |
                    falls name ist Hedy drucke Spaß
                    sonst drucke 'bäh!
                solution_text: |
                    Benutze immer 2 Anführungszeichen in einem drucke-Befehl.
                solution_code: |
                    falls name ist Hedy drucke 'Spaß'
                    sonst drucke 'bäh!'
        -   title: "Schüler nutzen Anführungszeichen um Variablennamen herum"
            example:
                error_text: |
                    In diesem Level sind keine Anführungszeichen um Variablennamen herum.
                error_code: |
                    falls 'name' ist 'Hedy' drucke 'Spaß'
                    sonst drucke 'meh!'
                solution_text: |
                    Entferne die Anführungszeichen, um den Code zum Laufen zu kriegen.
                solution_code: |
                    falls name ist Hedy drucke 'Spaß'
                    sonst drucke 'bäh!
        -   title: "Schüler verwenden lange Variablennamen bestehend aus zwei Worten"
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    gewählte Tür ist frage 'Welche Tür wählst du?'
                solution_text: |
                    Füge einen Unterstrich hinzu.
                solution_code: |
                    gewählte_tür ist frage 'Welche Tür wählst du?'
        -   title: "Schülerinnen und Schüler möchten, dass mehrere Antworten richtig sind"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "Die Schülerinnen und Schüler machen den Variablennamen zum Gleichen wie den Wert im falls-Befehl"
            example:
                error_text: |
                    Im Beispiel ist das Passwort 'Passwort'. Dies führt dazu, dass es immer richtig ist.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Schüler kämpfen mit Anführungszeichen
            example:
                error_text: "Einige Schüler haben Probleme damit, Anführungszeichen hinzuzufügen oder nicht. Wenn du Anführungszeichen hinzufügst, wird auf dem Ausgabebildschirm buchstäblich \"5+5\" angezeigt.\n"
                error_code: "print '5 + 5'\n"
                solution_text: "In diesem Code wird auf dem Ausgabebildschirm '10' angezeigt.\n"
                solution_code: "print 5 + 5\n"
        -   title: Schüler haben Schwierigkeiten mit dem Konzept der Mathematik mit einer Variablen
            example:
                error_text: "Einigen Schülern fällt es schwer, mit Variablen zu rechnen. Versuchen Sie, ihnen sehr einfache Beispiele zu zeigen, wie z. B.:\n"
                error_code: "age = ask 'Wie alt bist du?'\nprint 'Nächstes Jahr bist du ' age + 1\n"
                solution_text: "Oder gehen Sie noch einen Schritt weiter, etwa so.\n"
                solution_code: "Preis = 0\nprint 'Willkommen in unserem Burger-Restaurant'\nburger = ask 'Möchten Sie einen Burger?\nif burger = ja preis = preis + 10\ndrink = Frage 'Möchten Sie ein Getränk?\nif Getränk = ja Preis = Preis + 4\nprint 'Das macht dann ' Preis ' Euro bitte'\n"
    -   level: '7'
        sections:
        -   title: Die Schüler vergessen ein Wort des Wiederholungsbefehls oder sie vergessen den Druckbefehl
            example:
                error_text: "Vergewissern Sie sich, dass die Schüler sowohl den vollständigen Wiederholungsbefehl als auch den Druckbefehl verwenden können.\n"
                error_code: "repeat 3 times 'Denn er ist ein toller Kerl'\nrepeat 3 times 'Das kann niemand leugnen!'\n"
                solution_text: "Dies ist der richtige Code:\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   title: Students try to repeat multiple lines
            example:
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                error_code: "repeat 3 times\nprint 'hello'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times\n    print 'hello'\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   title: Students forget the indentation
            example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_text: "You should use indentation after a for command.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
    -   sections:
        -   title: Students forget to use indentation
            example:
                error_text: "Make sure that the students use indentation.\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "This is the correct code:\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   example:
                error_code: "for i in range 1 to 5\nprint i\n"
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
            title: Students don't understand the i
        level: '11'
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                error_text: "Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                error_code: "print 2,5 + 2,5\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print 2.5 + 2.5\n"
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   sections:
        -   example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
            title: Students confuse the < and > signs
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
        level: '14'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: "Indentation is often hard for students.\n"
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students use the wrong brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students still use the old at random command
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
    -   sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   example:
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
                error_text: "After each command that requires indentation, a colon should be used.\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
            title: Students forget the colon
        level: '17'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: "Students will forget to put brackets around their text.\n"
                error_code: "print 'my name is Hedy!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('my name is Hedy!')\n"
        -   title: Students will still use the ask command
            example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_text: "This is the correct code:\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
learn-more-sections:
-   title: "Komm in die Hedy-Gemeinschaft"
    text: |
        Wir hören gern von dir! Die beste Kontaktmöglichkeit ist unser [Discord-Server](https://discord.gg/8yY7dEme9r).

        Du kannst uns auch eine [E-Mail schicken](mailto:hello@hedy.org "Über Hedy").
-   title: "Ein tiefes Eintauchen!"
    text: |
        Möchtest du mehr über Hedys Philosophie und Design erfahren? Schau dir den Vortrag von Felienne bei der StrangeLoop Conference 2022 an:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: "Hedy in den Nachrichten"
    text: |
        Some websites and newspapers have written about Hedy since our release in early 2020. We keep a list here:
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: "Textbasierte Programmierung in einfach!"
    text: |
        Programmieren lernen kann schwer sein. Nicht, dass Programmieren selbst *schwer* wäre! Aber es gibt eine Menge Regeln, die du dir einprägen musst, genau wie beim Erlernen einer neuen Sprache.
        Genauso musst du viel üben, um Programmieren zu lernen.

        Du kannst diese Sätze mit Leichtigkeit lesen. Aber weißt du noch, als du lesen gelernt hast? Damals hast du für jeden Buchstaben etwas Zeit gebraucht!
        Das gilt auch für das Programmieren, es mag am Anfang schwer sein, aber es wird einfacher!

        Das Schöne an Hedy ist, dass die Programmiersprache *mitwächst*. Das bedeutet, dass du nicht alle Regeln auf einmal lernen musst.
        Die ersten Level haben nicht so viele Regeln, so dass du dich bequem an das Programmieren gewöhnen kannst.
        Mit jedem Level kommen neue Regeln hinzu, wodurch die Anzahl der Befehle, die du kennst, steigt. Befehle sind Anweisungen für einen Computer. Zusammengesetzt bilden sie Programmcode mit dem du Programme erstellen kannst.
-   title: "Mehrsprachige Programmierung"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Programmierung im Kontext"
    text: |
        Hedy ist für alle Kinder gedacht, die programmieren lernen wollen! Du solltest schon gut lesen können.
-   title: "Brauche ich Programmiererfahrung?"
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!
-   title: "Ist Hedy kostenlos?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: Muss ich etwas installieren?
    text: "No, that is not needed. All concepts are explained in the slides and in the interface for learners.\nIf you create a free teacher's account, you also get access to the teacher's manual with information on how to teach\nand frequently made mistakes."
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
