title: "Hedy dokumentation"
sections:
-   title: "Einführung zu Hedy"
    key: "intro"
    subsections:
    -   title: "Was ist Hedy?"
        text: |
            Hedy ist eine textuelle Programmiersprache, die speziell für (Pre-)Teens (10 bis 15 Jahre alt) entwickelt wurde.
            Im Gegensatz zu Programmiersprachen für Kinder, wie Scratch, verwendet Hedy keine Codeblöcke, sondern textuellen Code.
            Mit Hedy lernt man also, Code zu tippen, wie es echte Programmierer tun, aber in kleinen Schritten mit spielerischen Übungen.
            Auf diese Weise kann Hedy als Sprungbrett zu echten Programmiersprachen wie Python dienen, und das auf eine zugängliche und vor allem spaßige Weise!
            Hier können Sie sich ein [Video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) über die Entwicklung von Hedy als Programmiersprache ansehen.
    -   title: "Zielgruppe"
        text: |
            Hedy wurde für Schüler der Unter- und Mittelstufe entwickelt (10 – 15 Jahre).
            Es ist wichtig, dass die Schüler gut lesen können. Wir empfehlen, erst mit Hedy anzufangen, wenn die Schüler mindestens das Leseniveau der 3. Klasse erreicht haben.
            Schüler (und Lehrer!) brauchen keine Programmiererfahrung, bevor sie mit Hedy beginnen.
    -   title: "Wie funktioniert Hedy?"
        text: |
            Hedy ist in Level unterteilt, in denen neue Befehle gelehrt werden. Jede Stufe enthält eine Vielzahl von Abenteuern, in denen die neu erlernten Befehle geübt werden können.
            Als Lehrer können Sie entscheiden, welche Abenteuer für Ihre Schüler zur Verfügung stehen. Werden sie in diesem Level ein Restaurant, eine Rechenmaschine oder ein Spukhaus bauen? Innerhalb jedes Levels sind die Abenteuer vom einfachsten zum schwierigsten geordnet.
            So werden Ihre Schüler immer wieder neu herausgefordert. Die Abenteuer können von den Schülern einzeln gelöst werden, oder Sie können sie in einem klassischen Unterricht einsetzen.

            Zu den Abenteuern gehört auch ein Code-Beispiel, damit auch weniger digital informierte Lehrer Hedy nutzen können!
            Natürlich ist Hedy auch für die kreativen Lehrer gedacht, die gerne ihre eigenen Unterrichtspläne und Abenteuer erstellen!

            Nachdem Sie alle Abenteuer eines bestimmten Levels programmiert haben, können Ihre Schüler ihr Wissen in einem Quiz testen.
            Sie können die Arbeit und den Fortschritt Ihrer Schüler auf der Klassenseite verfolgen.
    -   title: "Geräte"
        text: |
            Hedy ist webbasiert, d.h. es funktioniert auf jedem Gerät mit einem Browser (Chrome, Firefox, Edge usw.), so dass Laptops, ChromeBuhks, Tablets und sogar Smartphones geeignet sind, um Hedy zu verwenden.
            Du musst nichts herunterladen, bevor du mit Hedy arbeitest, geh’ einfach auf die Website und schon kannst du loslegen!
    -   title: Die Hedy Community
        text: "Alle Hedy-Lehrpersonen, Programmierer und andere Fans sind auf unserem [Discord-Server](https://discord.gg/8yY7dEme9r) willkommen. Dies ist der ideale Ort, um sich über Hedy auszutauschen: wir haben Channel, wo du deine coolen Projekte und Lektionen zeigen kannst, Channel um Fehler zu melden, und Channel um sich mit anderen Lehrpersonen und dem Hedy-Team zu unterhalten.\n"
-   title: "Vorbereitungen"
    key: "vorbereitungen"
    subsections:
    -   title: "Klasse Anlegen"
        text: |
            Als Lehrer oder Lehrerin kannst du eine Klasse für deine Schülerinnen und Schüler erstellen. In dieser Klasse kannst du die SuS-Accounts und ihre Programme sehen und ihren Fortschritt beobachten.
            Du kannst deine Klasse modifizieren und auswählen, welche Abenteuer für sie verfügbar sind. Auf diese Weise werden deine Schülerinnen und Schüler nicht von der Anzahl der Abenteuer und Level überfordert und sie können sich speziell auf die Abenteuer konzentrieren, mit denen sie üben sollen.
    -   text: "Es gibt 2 Wege, wie deine Schülerinnen und Schüler einer Klasse beitreten: Du kannst sie ihre eigenen Accounts erstellen lassen oder für sie Accounts anlegen.\n\n**Schülerinnen und Schüler machen ihre eigenen Accounts**\nDeine Schülerinnen und Schüler gehen auf die Hedy Website und erstellen ihre eigenen Accounts, so wie du es getan hast. Um sie deiner Klasse hinzuzufügen, müssen sie nur auf den Einladungs-Link klicken.\nDu findest den Einladungs-Link auf der Klassenseite, um ihn deinen Schülerinnen und Schülern zu schicken. Beachte, dass deine Schülerinnen und Schüler eingeloggt sein müssen, wenn sie den Link anklicken, damit es reibungslos läuft.\n\n**Du erstellst Accounts für deine Schülerinnen und Schüler**\nManchmal ist es leichter einen Haufen Accounts für deine Schülerinnen und Schüler selbst anzulegen. Dies geht, indem man auf \"Erstelle SuS-Accounts\" klickt und die Nutzernamen und Passwörter für sie ausfüllt.\nDie Schülerinnen und Schüler können sich mit den Nutzernamen und Passwörtern deiner Wahl einloggen. Danach können sie beides ändern, wenn sie möchten, und bleiben trotzdem in deiner Klasse.\n"
    -   text: "Wenn Schülerinnen und Schüler Konten erstellen, sollen sie eine 'bevorzugte Sprache' auswählen. Hedy wird immer in dieser Sprache geladen werden.\nDiese Sprache kann später geändert werden in dem man zu 'Mein Konto' und dann zu 'Meine persönlichen Einstellungen' navigiert.\nAb Dezember 2021 ist die Einstellung einer bevorzugten Sprache für jedes Hedy Konto obligatorisch.\nWenn dein Konto oder das Konto von Schülerinnen und Schülern früher als dieses Datum erstellt wurde, erhält das entsprechende Konto eine Nachricht, dass die bevorzugte Sprache fehlt.\nKeine Sorge! Navigiere zu 'Mein Konto' und stelle eine Sprache in den Profil-Einstellungen ein.\nBis eine Sprache eingestellt wurde, wird Hedy in der Browser Sprache angezeigt, sofern sie unterstützt wird, ansonsten auf Englisch.\n\n**Für Nicht-Englischsprachige**\nDu kannst nicht nur die Sprache der Abenteuer auf deine eigene Sprache festlegen. Auch die Schlüsselwörter (wie z.B. 'print' oder 'ask') können in der eigenen Sprache angezeigt werden.\nSo kannst du deinen Schülern programmieren mit englischen Schlüsselwörter beibringen, du kannst sie aber auch in ihrer eigenen Sprache programmieren lassen. Zum Beispiel können niederländische Schüler den Befehl 'vraag' anstatt 'ask' benutzen.\n"
    -   text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   title: "Unterricht mit Hedy"
    key: "unterricht"
    subsections:
    -   title: " "
        text: |
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
    -   title: "Introduction"
        text: |
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.
    -   title: "Einführung in neue Konzepte und Befehle"
        text: |
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').
    -   title: "Lass uns loslegen"
        text: |
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: "Quiz"
        text: |
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
    -   text: |
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: "Oft gemachte Fehler"
    key: "häufige_fehler"
    levels:
    -   level: '1'
        sections:
        -   example:
                error_text: |
                    Beispielsweise schreiben sie einen Satz ohne den print Befehl.
                solution_text: |
                    Lehre deinen Schülern eine Zeile immer mit einem Befehl zu starten.
        -   title: "Schüler schreiben Befehle in Großbuchstaben"
            example:
                error_code: |
                    Frage warum schlägt mein Code fehl? 
                    Print Weil Ich Großbuchstaben benutze.
                solution_code: |
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   example:
                error_text: |
                    Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                solution_text: |
                    Add an ask command to make it work.
        -   title: "Students want their echo word (variable) to be in the middle of a sentence"
            example:
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   example:
                error_text: |
                    Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                solution_text: |
                    In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
        -   title: "Turtle: Students use the command backward, but that doens't exist"
            example:
                error_code: |
                    backward 100
                solution_code: |
                    forward -100
    -   sections:
        -   title: "Students make typos in their commands"
            example:
                error_code: |
                    prinnt Don't make typos!
                solution_code: |
                    print Don't make typos!
        -   example:
                error_text: |
                    In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                solution_text: |
                    In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
        -   title: "Students try to use the echo command. "
            example:
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   example:
                error_text: |
                    In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                solution_text: |
                    So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
        -   title: "Students use long variable names containing two words."
            example:
                error_code: |
                    chosen door is ask Which door do you pick?
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
    -   level: '3'
        sections:
        -   example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with at random.
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
        -   title: "Schüler nutzen den Namen einer Variablen oder Liste als ganz normalen Text"
            example:
                error_code: |
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_code: |
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   example:
                error_text: |
                    Like in the example
                solution_text: |
                    This problem is solved by adding the word at.
        -   title: "Schüler vergessen den Ausgabebefehl zu nutzen während sie auch den zufällig-Befehl benutzen"
            example:
                error_code: |
                    fruit is apple, cherry, banana
                    fruit at random
                solution_code: |
                    fruit is apple, cherry, banana
                    print fruit at random
        -   example:
                error_text: |
                    In a list items are seperated with a comma.
                solution_text: |
                    After each item on your list, there should be a comma
        -   title: "Schüler versuchen den zufällig Befehl ohne eine Liste zu verwenden"
            example:
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
        -   title: "Schüler vergessen von/bis im hinzufügen/entfernen zu verwenden"
            example:
                error_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   sections:
        -   title: "Students forget to use quotation marks on both sides of the text"
            example:
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the "double quotes" or the `skewed one`.
                solution_text: |
                    These are the correct quotation marks:
        -   title: "Students use an apostrophe in their text"
            example:
                error_code: |
                    print 'You're not allowed to type this'
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   sections:
        -   title: "Students forget to use print in an if command"
            example:
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
        -   title: "Schüler vergessen immer noch die Anführungszeichen auf beiden Seiten"
            example:
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   example:
                error_text: |
                    In this level there are no quotes around variable names.
                solution_text: |
                    Remove the quotes to get the code to work.
        -   title: "Schüler verwenden lange Variablennamen bestehend aus zwei Worten"
            example:
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
        -   title: "The students make the variable name the same as the value in the if statement"
            example:
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_code: |
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   sections:
        -   title: Schüler kämpfen mit Anführungszeichen
            example:
                error_code: "print '5 + 5'\n"
                solution_code: "print 5 + 5\n"
        -   example:
                error_text: "Einigen Schülern fällt es schwer, mit Variablen zu rechnen. Versuchen Sie, ihnen sehr einfache Beispiele zu zeigen, wie z. B.:\n"
                solution_text: "Oder gehen Sie noch einen Schritt weiter, etwa so.\n"
    -   level: '7'
        sections:
        -   example:
                error_text: "Vergewissern Sie sich, dass die Schüler sowohl den vollständigen Wiederholungsbefehl als auch den Druckbefehl verwenden können.\n"
                solution_text: "Dies ist der richtige Code:\n"
        -   title: Students try to repeat multiple lines
            example:
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
        -   example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                solution_text: "Make sure the codes aren't too long\n"
    -   level: '8'
        sections:
        -   example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                solution_text: "This is the correct code for this level:\n"
        -   title: Students make programs that take too long to run
            example:
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
    -   level: '9'
        sections:
        -   example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
    -   level: '10'
        sections:
        -   example:
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
        -   title: Students forget the indentation
            example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
    -   sections:
        -   example:
                error_text: "Make sure that the students use indentation.\n"
                solution_text: "This is the correct code:\n"
        -   example:
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
            title: Students don't understand the i
    -   level: '12'
        sections:
        -   example:
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                solution_text: "This is the correct code:\n"
    -   level: '13'
        sections:
        -   example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
    -   sections:
        -   example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                solution_text: "This is the correct code:\n"
            title: Students confuse the < and > signs
        -   example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget to use the == sign
            example:
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   level: '15'
        sections:
        -   example:
                error_text: "Indentation is often hard for students.\n"
                solution_text: "This is the correct code:\n"
    -   level: '16'
        sections:
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students use the wrong brackets
            example:
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students still use the old at random command
            example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_text: "This is the correct code:\n"
    -   sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   example:
                solution_text: "This is the correct code:\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
        level: '17'
    -   sections:
        -   title: Students forget to use the brackets
            example:
                error_code: "print 'my name is Hedy!'\n"
                solution_code: "print('my name is Hedy!')\n"
        -   example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                solution_text: "This is the correct code:\n"
        -   title: Students might use the brackets as quotation marks
            example:
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
learn-more-sections:
-   title: "Komm in die Hedy-Gemeinschaft"
    text: |
        Wir hören gern von dir! Die beste Kontaktmöglichkeit ist unser [Discord-Server](https://discord.gg/8yY7dEme9r).

        Du kannst uns auch eine [E-Mail schicken](mailto:hello@hedy.org "Über Hedy").
-   title: "Ein tiefes Eintauchen!"
    text: |
        Möchtest du mehr über Hedys Philosophie und Design erfahren? Schau dir den Vortrag von Felienne bei der StrangeLoop Conference 2022 an:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: "Hedy in den Nachrichten"
    text: |
        Some websites and newspapers have written about Hedy since our release in early 2020. We keep a list here:
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: "Textbasierte Programmierung in einfach!"
    text: |
        Programmieren lernen kann schwer sein. Nicht, dass Programmieren selbst *schwer* wäre! Aber es gibt eine Menge Regeln, die du dir einprägen musst, genau wie beim Erlernen einer neuen Sprache.
        Genauso musst du viel üben, um Programmieren zu lernen.

        Du kannst diese Sätze mit Leichtigkeit lesen. Aber weißt du noch, als du lesen gelernt hast? Damals hast du für jeden Buchstaben etwas Zeit gebraucht!
        Das gilt auch für das Programmieren, es mag am Anfang schwer sein, aber es wird einfacher!

        Das Schöne an Hedy ist, dass die Programmiersprache *mitwächst*. Das bedeutet, dass du nicht alle Regeln auf einmal lernen musst.
        Die ersten Level haben nicht so viele Regeln, so dass du dich bequem an das Programmieren gewöhnen kannst.
        Mit jedem Level kommen neue Regeln hinzu, wodurch die Anzahl der Befehle, die du kennst, steigt. Befehle sind Anweisungen für einen Computer. Zusammengesetzt bilden sie Programmcode mit dem du Programme erstellen kannst.
-   title: "Mehrsprachige Programmierung"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Programmierung im Kontext"
    text: |
        Hedy ist für alle Kinder gedacht, die programmieren lernen wollen! Du solltest schon gut lesen können.
-   title: "Brauche ich Programmiererfahrung?"
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!
-   title: "Ist Hedy kostenlos?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: Muss ich etwas installieren?
    text: "No, that is not needed. All concepts are explained in the slides and in the interface for learners.\nIf you create a free teacher's account, you also get access to the teacher's manual with information on how to teach\nand frequently made mistakes."
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
